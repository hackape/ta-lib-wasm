/**
 * DO NOT MODIFY DIRECTLY
 * This file is generated by "scripts/gencode.js" base on "src/api.json"
 * @internal
 */
const API: any = {"ACCBANDS":{"name":"ACCBANDS","camelCaseName":"accBands","group":"Overlap Studies","description":"Acceleration Bands","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":20,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"upperBand","type":"Double[]","plotHint":"limit_upper"},{"name":"middleBand","type":"Double[]","plotHint":"line"},{"name":"lowerBand","type":"Double[]","plotHint":"limit_lower"}]},"ACOS":{"name":"ACOS","camelCaseName":"acos","group":"Math Transform","description":"Vector Trigonometric ACos","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"AD":{"name":"AD","camelCaseName":"ad","group":"Volume Indicators","description":"Chaikin A/D Line","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"},{"name":"volume","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ADD":{"name":"ADD","camelCaseName":"add","group":"Math Operators","description":"Vector Arithmetic Add","inputs":[{"name":"inReal0","type":"Double[]"},{"name":"inReal1","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ADOSC":{"name":"ADOSC","camelCaseName":"adOsc","group":"Volume Indicators","description":"Chaikin A/D Oscillator","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"},{"name":"volume","type":"Double[]"}],"options":[{"name":"fastPeriod","displayName":"Fast Period","defaultValue":3,"hint":"Number of period for the fast MA","type":"Integer","range":{"min":2,"max":100000}},{"name":"slowPeriod","displayName":"Slow Period","defaultValue":10,"hint":"Number of period for the slow MA","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ADX":{"name":"ADX","camelCaseName":"adx","group":"Momentum Indicators","description":"Average Directional Movement Index","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ADXR":{"name":"ADXR","camelCaseName":"adxr","group":"Momentum Indicators","description":"Average Directional Movement Index Rating","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"APO":{"name":"APO","camelCaseName":"apo","group":"Momentum Indicators","description":"Absolute Price Oscillator","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"fastPeriod","displayName":"Fast Period","defaultValue":12,"hint":"Number of period for the fast MA","type":"Integer","range":{"min":2,"max":100000}},{"name":"slowPeriod","displayName":"Slow Period","defaultValue":26,"hint":"Number of period for the slow MA","type":"Integer","range":{"min":2,"max":100000}},{"name":"MAType","displayName":"MA Type","defaultValue":0,"hint":"Type of Moving Average","type":"MAType"}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"AROON":{"name":"AROON","camelCaseName":"aroon","group":"Momentum Indicators","description":"Aroon","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"aroonDown","type":"Double[]","plotHint":"line_dash"},{"name":"aroonUp","type":"Double[]","plotHint":"line"}]},"AROONOSC":{"name":"AROONOSC","camelCaseName":"aroonOsc","group":"Momentum Indicators","description":"Aroon Oscillator","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ASIN":{"name":"ASIN","camelCaseName":"asin","group":"Math Transform","description":"Vector Trigonometric ASin","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ATAN":{"name":"ATAN","camelCaseName":"atan","group":"Math Transform","description":"Vector Trigonometric ATan","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ATR":{"name":"ATR","camelCaseName":"atr","group":"Volatility Indicators","description":"Average True Range","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"AVGDEV":{"name":"AVGDEV","camelCaseName":"avgDev","group":"Price Transform","description":"Average Deviation","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"AVGPRICE":{"name":"AVGPRICE","camelCaseName":"avgPrice","group":"Price Transform","description":"Average Price","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"BBANDS":{"name":"BBANDS","camelCaseName":"bbands","group":"Overlap Studies","description":"Bollinger Bands","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":5,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}},{"name":"nbDevUp","displayName":"Deviations up","defaultValue":2,"hint":"Deviation multiplier for upper band","type":"Double","range":{"min":-3e+37,"max":3e+37}},{"name":"nbDevDn","displayName":"Deviations down","defaultValue":2,"hint":"Deviation multiplier for lower band","type":"Double","range":{"min":-3e+37,"max":3e+37}},{"name":"MAType","displayName":"MA Type","defaultValue":0,"hint":"Type of Moving Average","type":"MAType"}],"outputs":[{"name":"upperBand","type":"Double[]","plotHint":"limit_upper"},{"name":"middleBand","type":"Double[]","plotHint":"line"},{"name":"lowerBand","type":"Double[]","plotHint":"limit_lower"}]},"BETA":{"name":"BETA","camelCaseName":"beta","group":"Statistic Functions","description":"Beta","inputs":[{"name":"inReal0","type":"Double[]"},{"name":"inReal1","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":5,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"BOP":{"name":"BOP","camelCaseName":"bop","group":"Momentum Indicators","description":"Balance Of Power","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"CCI":{"name":"CCI","camelCaseName":"cci","group":"Momentum Indicators","description":"Commodity Channel Index","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"CDL2CROWS":{"name":"CDL2CROWS","camelCaseName":"cdl2Crows","group":"Pattern Recognition","description":"Two Crows","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDL3BLACKCROWS":{"name":"CDL3BLACKCROWS","camelCaseName":"cdl3BlackCrows","group":"Pattern Recognition","description":"Three Black Crows","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDL3INSIDE":{"name":"CDL3INSIDE","camelCaseName":"cdl3Inside","group":"Pattern Recognition","description":"Three Inside Up/Down","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDL3LINESTRIKE":{"name":"CDL3LINESTRIKE","camelCaseName":"cdl3LineStrike","group":"Pattern Recognition","description":"Three-Line Strike ","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDL3OUTSIDE":{"name":"CDL3OUTSIDE","camelCaseName":"cdl3Outside","group":"Pattern Recognition","description":"Three Outside Up/Down","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDL3STARSINSOUTH":{"name":"CDL3STARSINSOUTH","camelCaseName":"cdl3StarsInSouth","group":"Pattern Recognition","description":"Three Stars In The South","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDL3WHITESOLDIERS":{"name":"CDL3WHITESOLDIERS","camelCaseName":"cdl3WhiteSoldiers","group":"Pattern Recognition","description":"Three Advancing White Soldiers","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLABANDONEDBABY":{"name":"CDLABANDONEDBABY","camelCaseName":"cdlAbandonedBaby","group":"Pattern Recognition","description":"Abandoned Baby","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"penetration","displayName":"Penetration","defaultValue":0.3,"hint":"Percentage of penetration of a candle within another candle","type":"Double","range":{"min":0,"max":3e+37}}],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLADVANCEBLOCK":{"name":"CDLADVANCEBLOCK","camelCaseName":"cdlAdvanceBlock","group":"Pattern Recognition","description":"Advance Block","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLBELTHOLD":{"name":"CDLBELTHOLD","camelCaseName":"cdlBeltHold","group":"Pattern Recognition","description":"Belt-hold","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLBREAKAWAY":{"name":"CDLBREAKAWAY","camelCaseName":"cdlBreakaway","group":"Pattern Recognition","description":"Breakaway","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLCLOSINGMARUBOZU":{"name":"CDLCLOSINGMARUBOZU","camelCaseName":"cdlClosingMarubozu","group":"Pattern Recognition","description":"Closing Marubozu","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLCONCEALBABYSWALL":{"name":"CDLCONCEALBABYSWALL","camelCaseName":"cdlConcealBabysWall","group":"Pattern Recognition","description":"Concealing Baby Swallow","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLCOUNTERATTACK":{"name":"CDLCOUNTERATTACK","camelCaseName":"cdlCounterAttack","group":"Pattern Recognition","description":"Counterattack","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLDARKCLOUDCOVER":{"name":"CDLDARKCLOUDCOVER","camelCaseName":"cdlDarkCloudCover","group":"Pattern Recognition","description":"Dark Cloud Cover","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"penetration","displayName":"Penetration","defaultValue":0.5,"hint":"Percentage of penetration of a candle within another candle","type":"Double","range":{"min":0,"max":3e+37}}],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLDOJI":{"name":"CDLDOJI","camelCaseName":"cdlDoji","group":"Pattern Recognition","description":"Doji","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLDOJISTAR":{"name":"CDLDOJISTAR","camelCaseName":"cdlDojiStar","group":"Pattern Recognition","description":"Doji Star","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLDRAGONFLYDOJI":{"name":"CDLDRAGONFLYDOJI","camelCaseName":"cdlDragonflyDoji","group":"Pattern Recognition","description":"Dragonfly Doji","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLENGULFING":{"name":"CDLENGULFING","camelCaseName":"cdlEngulfing","group":"Pattern Recognition","description":"Engulfing Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLEVENINGDOJISTAR":{"name":"CDLEVENINGDOJISTAR","camelCaseName":"cdlEveningDojiStar","group":"Pattern Recognition","description":"Evening Doji Star","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"penetration","displayName":"Penetration","defaultValue":0.3,"hint":"Percentage of penetration of a candle within another candle","type":"Double","range":{"min":0,"max":3e+37}}],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLEVENINGSTAR":{"name":"CDLEVENINGSTAR","camelCaseName":"cdlEveningStar","group":"Pattern Recognition","description":"Evening Star","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"penetration","displayName":"Penetration","defaultValue":0.3,"hint":"Percentage of penetration of a candle within another candle","type":"Double","range":{"min":0,"max":3e+37}}],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLGAPSIDESIDEWHITE":{"name":"CDLGAPSIDESIDEWHITE","camelCaseName":"cdlGapSideSideWhite","group":"Pattern Recognition","description":"Up/Down-gap side-by-side white lines","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLGRAVESTONEDOJI":{"name":"CDLGRAVESTONEDOJI","camelCaseName":"cdlGravestoneDoji","group":"Pattern Recognition","description":"Gravestone Doji","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLHAMMER":{"name":"CDLHAMMER","camelCaseName":"cdlHammer","group":"Pattern Recognition","description":"Hammer","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLHANGINGMAN":{"name":"CDLHANGINGMAN","camelCaseName":"cdlHangingMan","group":"Pattern Recognition","description":"Hanging Man","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLHARAMI":{"name":"CDLHARAMI","camelCaseName":"cdlHarami","group":"Pattern Recognition","description":"Harami Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLHARAMICROSS":{"name":"CDLHARAMICROSS","camelCaseName":"cdlHaramiCross","group":"Pattern Recognition","description":"Harami Cross Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLHIGHWAVE":{"name":"CDLHIGHWAVE","camelCaseName":"cdlHignWave","group":"Pattern Recognition","description":"High-Wave Candle","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLHIKKAKE":{"name":"CDLHIKKAKE","camelCaseName":"cdlHikkake","group":"Pattern Recognition","description":"Hikkake Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLHIKKAKEMOD":{"name":"CDLHIKKAKEMOD","camelCaseName":"cdlHikkakeMod","group":"Pattern Recognition","description":"Modified Hikkake Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLHOMINGPIGEON":{"name":"CDLHOMINGPIGEON","camelCaseName":"cdlHomingPigeon","group":"Pattern Recognition","description":"Homing Pigeon","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLIDENTICAL3CROWS":{"name":"CDLIDENTICAL3CROWS","camelCaseName":"cdlIdentical3Crows","group":"Pattern Recognition","description":"Identical Three Crows","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLINNECK":{"name":"CDLINNECK","camelCaseName":"cdlInNeck","group":"Pattern Recognition","description":"In-Neck Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLINVERTEDHAMMER":{"name":"CDLINVERTEDHAMMER","camelCaseName":"cdlInvertedHammer","group":"Pattern Recognition","description":"Inverted Hammer","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLKICKING":{"name":"CDLKICKING","camelCaseName":"cdlKicking","group":"Pattern Recognition","description":"Kicking","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLKICKINGBYLENGTH":{"name":"CDLKICKINGBYLENGTH","camelCaseName":"cdlKickingByLength","group":"Pattern Recognition","description":"Kicking - bull/bear determined by the longer marubozu","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLLADDERBOTTOM":{"name":"CDLLADDERBOTTOM","camelCaseName":"cdlLadderBottom","group":"Pattern Recognition","description":"Ladder Bottom","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLLONGLEGGEDDOJI":{"name":"CDLLONGLEGGEDDOJI","camelCaseName":"cdlLongLeggedDoji","group":"Pattern Recognition","description":"Long Legged Doji","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLLONGLINE":{"name":"CDLLONGLINE","camelCaseName":"cdlLongLine","group":"Pattern Recognition","description":"Long Line Candle","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLMARUBOZU":{"name":"CDLMARUBOZU","camelCaseName":"cdlMarubozu","group":"Pattern Recognition","description":"Marubozu","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLMATCHINGLOW":{"name":"CDLMATCHINGLOW","camelCaseName":"cdlMatchingLow","group":"Pattern Recognition","description":"Matching Low","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLMATHOLD":{"name":"CDLMATHOLD","camelCaseName":"cdlMatHold","group":"Pattern Recognition","description":"Mat Hold","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"penetration","displayName":"Penetration","defaultValue":0.5,"hint":"Percentage of penetration of a candle within another candle","type":"Double","range":{"min":0,"max":3e+37}}],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLMORNINGDOJISTAR":{"name":"CDLMORNINGDOJISTAR","camelCaseName":"cdlMorningDojiStar","group":"Pattern Recognition","description":"Morning Doji Star","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"penetration","displayName":"Penetration","defaultValue":0.3,"hint":"Percentage of penetration of a candle within another candle","type":"Double","range":{"min":0,"max":3e+37}}],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLMORNINGSTAR":{"name":"CDLMORNINGSTAR","camelCaseName":"cdlMorningStar","group":"Pattern Recognition","description":"Morning Star","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"penetration","displayName":"Penetration","defaultValue":0.3,"hint":"Percentage of penetration of a candle within another candle","type":"Double","range":{"min":0,"max":3e+37}}],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLONNECK":{"name":"CDLONNECK","camelCaseName":"cdlOnNeck","group":"Pattern Recognition","description":"On-Neck Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLPIERCING":{"name":"CDLPIERCING","camelCaseName":"cdlPiercing","group":"Pattern Recognition","description":"Piercing Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLRICKSHAWMAN":{"name":"CDLRICKSHAWMAN","camelCaseName":"cdlRickshawMan","group":"Pattern Recognition","description":"Rickshaw Man","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLRISEFALL3METHODS":{"name":"CDLRISEFALL3METHODS","camelCaseName":"cdlRiseFall3Methods","group":"Pattern Recognition","description":"Rising/Falling Three Methods","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLSEPARATINGLINES":{"name":"CDLSEPARATINGLINES","camelCaseName":"cdlSeperatingLines","group":"Pattern Recognition","description":"Separating Lines","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLSHOOTINGSTAR":{"name":"CDLSHOOTINGSTAR","camelCaseName":"cdlShootingStar","group":"Pattern Recognition","description":"Shooting Star","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLSHORTLINE":{"name":"CDLSHORTLINE","camelCaseName":"cdlShortLine","group":"Pattern Recognition","description":"Short Line Candle","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLSPINNINGTOP":{"name":"CDLSPINNINGTOP","camelCaseName":"cdlSpinningTop","group":"Pattern Recognition","description":"Spinning Top","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLSTALLEDPATTERN":{"name":"CDLSTALLEDPATTERN","camelCaseName":"cdlStalledPattern","group":"Pattern Recognition","description":"Stalled Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLSTICKSANDWICH":{"name":"CDLSTICKSANDWICH","camelCaseName":"cdlStickSandwhich","group":"Pattern Recognition","description":"Stick Sandwich","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLTAKURI":{"name":"CDLTAKURI","camelCaseName":"cdlTakuri","group":"Pattern Recognition","description":"Takuri (Dragonfly Doji with very long lower shadow)","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLTASUKIGAP":{"name":"CDLTASUKIGAP","camelCaseName":"cdlTasukiGap","group":"Pattern Recognition","description":"Tasuki Gap","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLTHRUSTING":{"name":"CDLTHRUSTING","camelCaseName":"cdlThrusting","group":"Pattern Recognition","description":"Thrusting Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLTRISTAR":{"name":"CDLTRISTAR","camelCaseName":"cdlTristar","group":"Pattern Recognition","description":"Tristar Pattern","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLUNIQUE3RIVER":{"name":"CDLUNIQUE3RIVER","camelCaseName":"cdlUnique3River","group":"Pattern Recognition","description":"Unique 3 River","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLUPSIDEGAP2CROWS":{"name":"CDLUPSIDEGAP2CROWS","camelCaseName":"cdlUpsideGap2Crows","group":"Pattern Recognition","description":"Upside Gap Two Crows","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CDLXSIDEGAP3METHODS":{"name":"CDLXSIDEGAP3METHODS","camelCaseName":"cdlXSideGap3Methods","group":"Pattern Recognition","description":"Upside/Downside Gap Three Methods","inputs":[{"name":"open","type":"Double[]"},{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"CEIL":{"name":"CEIL","camelCaseName":"ceil","group":"Math Transform","description":"Vector Ceil","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"CMO":{"name":"CMO","camelCaseName":"cmo","group":"Momentum Indicators","description":"Chande Momentum Oscillator","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"CORREL":{"name":"CORREL","camelCaseName":"correl","group":"Statistic Functions","description":"Pearson's Correlation Coefficient (r)","inputs":[{"name":"inReal0","type":"Double[]"},{"name":"inReal1","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"COS":{"name":"COS","camelCaseName":"cos","group":"Math Transform","description":"Vector Trigonometric Cos","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"COSH":{"name":"COSH","camelCaseName":"cosh","group":"Math Transform","description":"Vector Trigonometric Cosh","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"DEMA":{"name":"DEMA","camelCaseName":"dema","group":"Overlap Studies","description":"Double Exponential Moving Average","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"DIV":{"name":"DIV","camelCaseName":"div","group":"Math Operators","description":"Vector Arithmetic Div","inputs":[{"name":"inReal0","type":"Double[]"},{"name":"inReal1","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"DX":{"name":"DX","camelCaseName":"dx","group":"Momentum Indicators","description":"Directional Movement Index","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"EMA":{"name":"EMA","camelCaseName":"ema","group":"Overlap Studies","description":"Exponential Moving Average","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"EXP":{"name":"EXP","camelCaseName":"exp","group":"Math Transform","description":"Vector Arithmetic Exp","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"FLOOR":{"name":"FLOOR","camelCaseName":"floor","group":"Math Transform","description":"Vector Floor","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"HT_DCPERIOD":{"name":"HT_DCPERIOD","camelCaseName":"htDcPeriod","group":"Cycle Indicators","description":"Hilbert Transform - Dominant Cycle Period","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"HT_DCPHASE":{"name":"HT_DCPHASE","camelCaseName":"htDcPhase","group":"Cycle Indicators","description":"Hilbert Transform - Dominant Cycle Phase","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"HT_PHASOR":{"name":"HT_PHASOR","camelCaseName":"htPhasor","group":"Cycle Indicators","description":"Hilbert Transform - Phasor Components","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"inPhase","type":"Double[]","plotHint":"line"},{"name":"quadrature","type":"Double[]","plotHint":"line_dash"}]},"HT_SINE":{"name":"HT_SINE","camelCaseName":"htSine","group":"Cycle Indicators","description":"Hilbert Transform - SineWave","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"sine","type":"Double[]","plotHint":"line"},{"name":"leadSine","type":"Double[]","plotHint":"line_dash"}]},"HT_TRENDLINE":{"name":"HT_TRENDLINE","camelCaseName":"htTrendline","group":"Overlap Studies","description":"Hilbert Transform - Instantaneous Trendline","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"HT_TRENDMODE":{"name":"HT_TRENDMODE","camelCaseName":"htTrendMode","group":"Cycle Indicators","description":"Hilbert Transform - Trend vs Cycle Mode","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"IMI":{"name":"IMI","camelCaseName":"imi","group":"Momentum Indicators","description":"Intraday Momentum Index","inputs":[{"name":"open","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"KAMA":{"name":"KAMA","camelCaseName":"kama","group":"Overlap Studies","description":"Kaufman Adaptive Moving Average","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"LINEARREG":{"name":"LINEARREG","camelCaseName":"linearReg","group":"Statistic Functions","description":"Linear Regression","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"LINEARREG_ANGLE":{"name":"LINEARREG_ANGLE","camelCaseName":"linearRegAngle","group":"Statistic Functions","description":"Linear Regression Angle","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"LINEARREG_INTERCEPT":{"name":"LINEARREG_INTERCEPT","camelCaseName":"linearRegIntercept","group":"Statistic Functions","description":"Linear Regression Intercept","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"LINEARREG_SLOPE":{"name":"LINEARREG_SLOPE","camelCaseName":"linearRegSlope","group":"Statistic Functions","description":"Linear Regression Slope","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"LN":{"name":"LN","camelCaseName":"ln","group":"Math Transform","description":"Vector Log Natural","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"LOG10":{"name":"LOG10","camelCaseName":"log10","group":"Math Transform","description":"Vector Log10","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MA":{"name":"MA","camelCaseName":"movingAverage","group":"Overlap Studies","description":"Moving average","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}},{"name":"MAType","displayName":"MA Type","defaultValue":0,"hint":"Type of Moving Average","type":"MAType"}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MACD":{"name":"MACD","camelCaseName":"macd","group":"Momentum Indicators","description":"Moving Average Convergence/Divergence","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"fastPeriod","displayName":"Fast Period","defaultValue":12,"hint":"Number of period for the fast MA","type":"Integer","range":{"min":2,"max":100000}},{"name":"slowPeriod","displayName":"Slow Period","defaultValue":26,"hint":"Number of period for the slow MA","type":"Integer","range":{"min":2,"max":100000}},{"name":"signalPeriod","displayName":"Signal Period","defaultValue":9,"hint":"Smoothing for the signal line (nb of period)","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"MACD","type":"Double[]","plotHint":"line"},{"name":"MACDSignal","type":"Double[]","plotHint":"line_dash"},{"name":"MACDHist","type":"Double[]","plotHint":"histogram"}]},"MACDEXT":{"name":"MACDEXT","camelCaseName":"macdExt","group":"Momentum Indicators","description":"MACD with controllable MA type","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"fastPeriod","displayName":"Fast Period","defaultValue":12,"hint":"Number of period for the fast MA","type":"Integer","range":{"min":2,"max":100000}},{"name":"fastMAType","displayName":"Fast MA","defaultValue":0,"hint":"Type of Moving Average for fast MA","type":"MAType"},{"name":"slowPeriod","displayName":"Slow Period","defaultValue":26,"hint":"Number of period for the slow MA","type":"Integer","range":{"min":2,"max":100000}},{"name":"slowMAType","displayName":"Slow MA","defaultValue":0,"hint":"Type of Moving Average for slow MA","type":"MAType"},{"name":"signalPeriod","displayName":"Signal Period","defaultValue":9,"hint":"Smoothing for the signal line (nb of period)","type":"Integer","range":{"min":1,"max":100000}},{"name":"signalMAType","displayName":"Signal MA","defaultValue":0,"hint":"Type of Moving Average for signal line","type":"MAType"}],"outputs":[{"name":"MACD","type":"Double[]","plotHint":"line"},{"name":"MACDSignal","type":"Double[]","plotHint":"line_dash"},{"name":"MACDHist","type":"Double[]","plotHint":"histogram"}]},"MACDFIX":{"name":"MACDFIX","camelCaseName":"macdFix","group":"Momentum Indicators","description":"Moving Average Convergence/Divergence Fix 12/26","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"signalPeriod","displayName":"Signal Period","defaultValue":9,"hint":"Smoothing for the signal line (nb of period)","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"MACD","type":"Double[]","plotHint":"line"},{"name":"MACDSignal","type":"Double[]","plotHint":"line_dash"},{"name":"MACDHist","type":"Double[]","plotHint":"histogram"}]},"MAMA":{"name":"MAMA","camelCaseName":"mama","group":"Overlap Studies","description":"MESA Adaptive Moving Average","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"fastLimit","displayName":"Fast Limit","defaultValue":0.5,"hint":"Upper limit use in the adaptive algorithm","type":"Double","range":{"min":0.01,"max":0.99}},{"name":"slowLimit","displayName":"Slow Limit","defaultValue":0.05,"hint":"Lower limit use in the adaptive algorithm","type":"Double","range":{"min":0.01,"max":0.99}}],"outputs":[{"name":"MAMA","type":"Double[]","plotHint":"line"},{"name":"FAMA","type":"Double[]","plotHint":"line_dash"}]},"MAVP":{"name":"MAVP","camelCaseName":"movingAverageVariablePeriod","group":"Overlap Studies","description":"Moving average with variable period","inputs":[{"name":"inReal","type":"Double[]"},{"name":"inPeriods","type":"Double[]"}],"options":[{"name":"minPeriod","displayName":"Minimum Period","defaultValue":2,"hint":"Value less than minimum will be changed to Minimum period","type":"Integer","range":{"min":2,"max":100000}},{"name":"maxPeriod","displayName":"Maximum Period","defaultValue":30,"hint":"Value higher than maximum will be changed to Maximum period","type":"Integer","range":{"min":2,"max":100000}},{"name":"MAType","displayName":"MA Type","defaultValue":0,"hint":"Type of Moving Average","type":"MAType"}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MAX":{"name":"MAX","camelCaseName":"max","group":"Math Operators","description":"Highest value over a specified period","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MAXINDEX":{"name":"MAXINDEX","camelCaseName":"maxIndex","group":"Math Operators","description":"Index of highest value over a specified period","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"MEDPRICE":{"name":"MEDPRICE","camelCaseName":"medPrice","group":"Price Transform","description":"Median Price","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MFI":{"name":"MFI","camelCaseName":"mfi","group":"Momentum Indicators","description":"Money Flow Index","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"},{"name":"volume","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MIDPOINT":{"name":"MIDPOINT","camelCaseName":"midPoint","group":"Overlap Studies","description":"MidPoint over period","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MIDPRICE":{"name":"MIDPRICE","camelCaseName":"midPrice","group":"Overlap Studies","description":"Midpoint Price over period","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MIN":{"name":"MIN","camelCaseName":"min","group":"Math Operators","description":"Lowest value over a specified period","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MININDEX":{"name":"MININDEX","camelCaseName":"minIndex","group":"Math Operators","description":"Index of lowest value over a specified period","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Integer[]","plotHint":"line"}]},"MINMAX":{"name":"MINMAX","camelCaseName":"minMax","group":"Math Operators","description":"Lowest and highest values over a specified period","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"min","type":"Double[]","plotHint":"line"},{"name":"max","type":"Double[]","plotHint":"line"}]},"MINMAXINDEX":{"name":"MINMAXINDEX","camelCaseName":"minMaxIndex","group":"Math Operators","description":"Indexes of lowest and highest values over a specified period","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"minIdx","type":"Integer[]","plotHint":"line"},{"name":"maxIdx","type":"Integer[]","plotHint":"line"}]},"MINUS_DI":{"name":"MINUS_DI","camelCaseName":"minusDI","group":"Momentum Indicators","description":"Minus Directional Indicator","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MINUS_DM":{"name":"MINUS_DM","camelCaseName":"minusDM","group":"Momentum Indicators","description":"Minus Directional Movement","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MOM":{"name":"MOM","camelCaseName":"mom","group":"Momentum Indicators","description":"Momentum","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":10,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"MULT":{"name":"MULT","camelCaseName":"mult","group":"Math Operators","description":"Vector Arithmetic Mult","inputs":[{"name":"inReal0","type":"Double[]"},{"name":"inReal1","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"NATR":{"name":"NATR","camelCaseName":"natr","group":"Volatility Indicators","description":"Normalized Average True Range","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"OBV":{"name":"OBV","camelCaseName":"obv","group":"Volume Indicators","description":"On Balance Volume","inputs":[{"name":"inReal","type":"Double[]"},{"name":"volume","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"PLUS_DI":{"name":"PLUS_DI","camelCaseName":"plusDI","group":"Momentum Indicators","description":"Plus Directional Indicator","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"PLUS_DM":{"name":"PLUS_DM","camelCaseName":"plusDM","group":"Momentum Indicators","description":"Plus Directional Movement","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"PPO":{"name":"PPO","camelCaseName":"ppo","group":"Momentum Indicators","description":"Percentage Price Oscillator","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"fastPeriod","displayName":"Fast Period","defaultValue":12,"hint":"Number of period for the fast MA","type":"Integer","range":{"min":2,"max":100000}},{"name":"slowPeriod","displayName":"Slow Period","defaultValue":26,"hint":"Number of period for the slow MA","type":"Integer","range":{"min":2,"max":100000}},{"name":"MAType","displayName":"MA Type","defaultValue":0,"hint":"Type of Moving Average","type":"MAType"}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ROC":{"name":"ROC","camelCaseName":"roc","group":"Momentum Indicators","description":"Rate of change : ((price/prevPrice)-1)*100","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":10,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ROCP":{"name":"ROCP","camelCaseName":"rocP","group":"Momentum Indicators","description":"Rate of change Percentage: (price-prevPrice)/prevPrice","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":10,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ROCR":{"name":"ROCR","camelCaseName":"rocR","group":"Momentum Indicators","description":"Rate of change ratio: (price/prevPrice)","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":10,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ROCR100":{"name":"ROCR100","camelCaseName":"rocR100","group":"Momentum Indicators","description":"Rate of change ratio 100 scale: (price/prevPrice)*100","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":10,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"RSI":{"name":"RSI","camelCaseName":"rsi","group":"Momentum Indicators","description":"Relative Strength Index","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"SAR":{"name":"SAR","camelCaseName":"sar","group":"Overlap Studies","description":"Parabolic SAR","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"}],"options":[{"name":"acceleration","displayName":"Acceleration Factor","defaultValue":0.02,"hint":"Acceleration Factor used up to the Maximum value","type":"Double","range":{"min":0,"max":3e+37}},{"name":"maximum","displayName":"AF Maximum","defaultValue":0.2,"hint":"Acceleration Factor Maximum value","type":"Double","range":{"min":0,"max":3e+37}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"SAREXT":{"name":"SAREXT","camelCaseName":"sarExt","group":"Overlap Studies","description":"Parabolic SAR - Extended","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"}],"options":[{"name":"startValue","displayName":"Start Value","defaultValue":0,"hint":"Start value and direction. 0 for Auto, >0 for Long, <0 for Short","type":"Double","range":{"min":-3e+37,"max":3e+37}},{"name":"offsetOnReverse","displayName":"Offset on Reverse","defaultValue":0,"hint":"Percent offset added/removed to initial stop on short/long reversal","type":"Double","range":{"min":0,"max":3e+37}},{"name":"accelerationInitLong","displayName":"AF Init Long","defaultValue":0.02,"hint":"Acceleration Factor initial value for the Long direction","type":"Double","range":{"min":0,"max":3e+37}},{"name":"accelerationLong","displayName":"AF Long","defaultValue":0.02,"hint":"Acceleration Factor for the Long direction","type":"Double","range":{"min":0,"max":3e+37}},{"name":"accelerationMaxLong","displayName":"AF Max Long","defaultValue":0.2,"hint":"Acceleration Factor maximum value for the Long direction","type":"Double","range":{"min":0,"max":3e+37}},{"name":"accelerationInitShort","displayName":"AF Init Short","defaultValue":0.02,"hint":"Acceleration Factor initial value for the Short direction","type":"Double","range":{"min":0,"max":3e+37}},{"name":"accelerationShort","displayName":"AF Short","defaultValue":0.02,"hint":"Acceleration Factor for the Short direction","type":"Double","range":{"min":0,"max":3e+37}},{"name":"accelerationMaxShort","displayName":"AF Max Short","defaultValue":0.2,"hint":"Acceleration Factor maximum value for the Short direction","type":"Double","range":{"min":0,"max":3e+37}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"SIN":{"name":"SIN","camelCaseName":"sin","group":"Math Transform","description":"Vector Trigonometric Sin","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"SINH":{"name":"SINH","camelCaseName":"sinh","group":"Math Transform","description":"Vector Trigonometric Sinh","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"SMA":{"name":"SMA","camelCaseName":"sma","group":"Overlap Studies","description":"Simple Moving Average","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"SQRT":{"name":"SQRT","camelCaseName":"sqrt","group":"Math Transform","description":"Vector Square Root","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"STDDEV":{"name":"STDDEV","camelCaseName":"stdDev","group":"Statistic Functions","description":"Standard Deviation","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":5,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}},{"name":"nbDev","displayName":"Deviations","defaultValue":1,"hint":"Nb of deviations","type":"Double","range":{"min":-3e+37,"max":3e+37}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"STOCH":{"name":"STOCH","camelCaseName":"stoch","group":"Momentum Indicators","description":"Stochastic","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"fastK_Period","displayName":"Fast-K Period","defaultValue":5,"hint":"Time period for building the Fast-K line","type":"Integer","range":{"min":1,"max":100000}},{"name":"slowK_Period","displayName":"Slow-K Period","defaultValue":3,"hint":"Smoothing for making the Slow-K line. Usually set to 3","type":"Integer","range":{"min":1,"max":100000}},{"name":"slowK_MAType","displayName":"Slow-K MA","defaultValue":0,"hint":"Type of Moving Average for Slow-K","type":"MAType"},{"name":"slowD_Period","displayName":"Slow-D Period","defaultValue":3,"hint":"Smoothing for making the Slow-D line","type":"Integer","range":{"min":1,"max":100000}},{"name":"slowD_MAType","displayName":"Slow-D MA","defaultValue":0,"hint":"Type of Moving Average for Slow-D","type":"MAType"}],"outputs":[{"name":"slowK","type":"Double[]","plotHint":"line_dash"},{"name":"slowD","type":"Double[]","plotHint":"line_dash"}]},"STOCHF":{"name":"STOCHF","camelCaseName":"stochF","group":"Momentum Indicators","description":"Stochastic Fast","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"fastK_Period","displayName":"Fast-K Period","defaultValue":5,"hint":"Time period for building the Fast-K line","type":"Integer","range":{"min":1,"max":100000}},{"name":"fastD_Period","displayName":"Fast-D Period","defaultValue":3,"hint":"Smoothing for making the Fast-D line. Usually set to 3","type":"Integer","range":{"min":1,"max":100000}},{"name":"fastD_MAType","displayName":"Fast-D MA","defaultValue":0,"hint":"Type of Moving Average for Fast-D","type":"MAType"}],"outputs":[{"name":"fastK","type":"Double[]","plotHint":"line"},{"name":"fastD","type":"Double[]","plotHint":"line"}]},"STOCHRSI":{"name":"STOCHRSI","camelCaseName":"stochRsi","group":"Momentum Indicators","description":"Stochastic Relative Strength Index","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}},{"name":"fastK_Period","displayName":"Fast-K Period","defaultValue":5,"hint":"Time period for building the Fast-K line","type":"Integer","range":{"min":1,"max":100000}},{"name":"fastD_Period","displayName":"Fast-D Period","defaultValue":3,"hint":"Smoothing for making the Fast-D line. Usually set to 3","type":"Integer","range":{"min":1,"max":100000}},{"name":"fastD_MAType","displayName":"Fast-D MA","defaultValue":0,"hint":"Type of Moving Average for Fast-D","type":"MAType"}],"outputs":[{"name":"fastK","type":"Double[]","plotHint":"line"},{"name":"fastD","type":"Double[]","plotHint":"line"}]},"SUB":{"name":"SUB","camelCaseName":"sub","group":"Math Operators","description":"Vector Arithmetic Substraction","inputs":[{"name":"inReal0","type":"Double[]"},{"name":"inReal1","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"SUM":{"name":"SUM","camelCaseName":"sum","group":"Math Operators","description":"Summation","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"T3":{"name":"T3","camelCaseName":"t3","group":"Overlap Studies","description":"Triple Exponential Moving Average (T3)","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":5,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}},{"name":"VFactor","displayName":"Volume Factor","defaultValue":0.7,"hint":"Volume Factor","type":"Double","range":{"min":0,"max":1}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"TAN":{"name":"TAN","camelCaseName":"tan","group":"Math Transform","description":"Vector Trigonometric Tan","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"TANH":{"name":"TANH","camelCaseName":"tanh","group":"Math Transform","description":"Vector Trigonometric Tanh","inputs":[{"name":"inReal","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"TEMA":{"name":"TEMA","camelCaseName":"tema","group":"Overlap Studies","description":"Triple Exponential Moving Average","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"TRANGE":{"name":"TRANGE","camelCaseName":"trueRange","group":"Volatility Indicators","description":"True Range","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"TRIMA":{"name":"TRIMA","camelCaseName":"trima","group":"Overlap Studies","description":"Triangular Moving Average","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"TRIX":{"name":"TRIX","camelCaseName":"trix","group":"Momentum Indicators","description":"1-day Rate-Of-Change (ROC) of a Triple Smooth EMA","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"TSF":{"name":"TSF","camelCaseName":"tsf","group":"Statistic Functions","description":"Time Series Forecast","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"TYPPRICE":{"name":"TYPPRICE","camelCaseName":"typPrice","group":"Price Transform","description":"Typical Price","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"ULTOSC":{"name":"ULTOSC","camelCaseName":"ultOsc","group":"Momentum Indicators","description":"Ultimate Oscillator","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod1","displayName":"First Period","defaultValue":7,"hint":"Number of bars for 1st period.","type":"Integer","range":{"min":1,"max":100000}},{"name":"timePeriod2","displayName":"Second Period","defaultValue":14,"hint":"Number of bars fro 2nd period","type":"Integer","range":{"min":1,"max":100000}},{"name":"timePeriod3","displayName":"Third Period","defaultValue":28,"hint":"Number of bars for 3rd period","type":"Integer","range":{"min":1,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"VAR":{"name":"VAR","camelCaseName":"variance","group":"Statistic Functions","description":"Variance","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":5,"hint":"Number of period","type":"Integer","range":{"min":1,"max":100000}},{"name":"nbDev","displayName":"Deviations","defaultValue":1,"hint":"Nb of deviations","type":"Double","range":{"min":-3e+37,"max":3e+37}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"WCLPRICE":{"name":"WCLPRICE","camelCaseName":"wclPrice","group":"Price Transform","description":"Weighted Close Price","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"WILLR":{"name":"WILLR","camelCaseName":"willR","group":"Momentum Indicators","description":"Williams' %R","inputs":[{"name":"high","type":"Double[]"},{"name":"low","type":"Double[]"},{"name":"close","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":14,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]},"WMA":{"name":"WMA","camelCaseName":"wma","group":"Overlap Studies","description":"Weighted Moving Average","inputs":[{"name":"inReal","type":"Double[]"}],"options":[{"name":"timePeriod","displayName":"Time Period","defaultValue":30,"hint":"Number of period","type":"Integer","range":{"min":2,"max":100000}}],"outputs":[{"name":"output","type":"Double[]","plotHint":"line"}]}};

// initialize wasm module

/** @internal */
var __INIT__: (m: any) => Promise<any> = __INIT__;

/** @internal */
let TA_WASM: any;

/** @internal */
function cArray(Module: any, size: number) {
  const offset = Module._malloc(size * 8);
  Module.HEAPF64.set(new Float64Array(size), offset / 8);
  return {
    data: Module.HEAPF64.subarray(offset / 8, offset / 8 + size),
    offset: offset,
  };
}

/** @internal */
const TA_RET_CODE = {
  0: 'TA_SUCCESS',
  1: 'TA_LIB_NOT_INITIALIZE',
  2: 'TA_BAD_PARAM',
  3: 'TA_ALLOC_ERR',
  4: 'TA_GROUP_NOT_FOUND',
  5: 'TA_FUNC_NOT_FOUND',
  6: 'TA_INVALID_HANDLE',
  7: 'TA_INVALID_PARAM_HOLDER',
  8: 'TA_INVALID_PARAM_HOLDER_TYPE',
  9: 'TA_INVALID_PARAM_FUNCTION',
  10: 'TA_INPUT_NOT_ALL_INITIALIZE',
  11: 'TA_OUTPUT_NOT_ALL_INITIALIZE',
  12: 'TA_OUT_OF_RANGE_START_INDEX',
  13: 'TA_OUT_OF_RANGE_END_INDEX',
  14: 'TA_INVALID_LIST_TYPE',
  15: 'TA_BAD_OBJECT',
  16: 'TA_NOT_SUPPORTED',
  5000: 'TA_INTERNAL_ERROR',
  [0xffff]: 'TA_UNKNOWN_ERR',
};

/** @internal */
type APIDescriptor = {
  name: string;
  camelCaseName: string;
  group: string;
  description: string;
  inputs: {
    name: string;
    type: string;
  }[];
  options: {
    name: string;
    displayName: string;
    defaultValue: number;
    hint: string;
    type: string;
    range?: {
      min: number;
      max: number;
    };
  }[];
  outputs: {
    name: string;
    type: string;
    plotHint: string;
  }[];
};

/** @internal */
function callFunc(api: APIDescriptor, params: any): any {
  const funcIdent = `TA_${api.name}`;
  if (!TA_WASM) throw Error(`${api.name}() called before initialization.`);

  // prettier-ignore
  const ccallArgsLen =
    2 /* startIdx, endIdx */ + 
    api.inputs.length + 
    api.options.length + 
    2 /* outBegIdx, outNBElement */ + 
    api.outputs.length;

  const argTypesToCcall = new Array(ccallArgsLen).fill('number');

  /**
   * Input params validation
   */
  for (const { name } of api.inputs) {
    if (!Array.isArray(params[name])) {
      if (params[name] === undefined)
        throw Error(`Bad Param: "${name}" is required`);
      throw Error(`Bad Param: "${name}" should be array of number`);
    }
  }

  for (const { name, defaultValue, range } of api.options) {
    if (params[name] === undefined) {
      params[name] = defaultValue;
    } else if (
      range &&
      (params[name] < range.min || params[name] > range.max)
    ) {
      throw Error(
        `Bad Param: "${name}" out of range (min: ${range.min}, max: ${range.max})`
      );
    }
  }

  let { startIdx, endIdx } = params;
  if (startIdx === undefined) startIdx = 0;
  const reqParamsLen = api.inputs.map(({ name }) => params[name].length);
  if (endIdx === undefined) {
    // endIdx safely set to the min of all input arrays
    endIdx = Math.min(...reqParamsLen);
  }

  /**
   * Constructing `argsToCcall` to pass to the `Module.ccall` API
   * Move things from `params` onto `argsToCcall`
   *
   * TA-Lib function signatures are of following form:
   * ```
   * FUNC(startIdx, endIdx, ...params, outBegIdx, outNBElement, ...outputs)
   * ```
   */
  const argsToCcall = [startIdx, endIdx];
  const arraysToRelease = [];

  api.inputs.forEach(({ name }) => {
    const argArray = cArray(TA_WASM, endIdx - startIdx);
    /** @type {number[]} */
    const paramArray = params[name];
    for (const i in paramArray) argArray.data[i] = paramArray[i];
    arraysToRelease.push(argArray);
    argsToCcall.push(argArray.offset);
  });

  api.options.forEach(({ name }) => argsToCcall.push(params[name]));

  argsToCcall.push(0); // outBegIdx
  argsToCcall.push(0); // outNBElement

  const outputs = api.outputs.map(({ name }) => {
    const argArray = cArray(TA_WASM, endIdx - startIdx);
    arraysToRelease.push(argArray);
    argsToCcall.push(argArray.offset);
    return { name, array: argArray };
  });

  const retCode = TA_WASM.ccall(
    funcIdent,
    'number' /* TA_RET_CODE */,
    argTypesToCcall,
    argsToCcall
  );
  arraysToRelease.forEach((arr) => TA_WASM._free(arr.offset));

  const result = outputs.reduce((result, current) => {
    result[current.name] = Array.from(current.array.data);
    return result;
  }, {});

  if (retCode === 0) {
    // success
    return result;
  } else {
    throw Error('[C_ERROR] ' + TA_RET_CODE[retCode]);
  }
}

// ======================
// Public API exports
// ======================

// prettier-ignore
/**
 * The `MAType` enum to be passed to some of the functions
 */
export enum MAType {
  SMA   = 0,
  EMA   = 1,
  WMA   = 2,
  DEMA  = 3,
  TEMA  = 4,
  TRIMA = 5,
  KAMA  = 6,
  MAMA  = 7,
  T3    = 8,
}

/**
 * ## Initialize wasm module
 *
 * To use the lib, you must first call `init()` to load and compile the wasm binary file in the JS runtime.
 * Because of the async nature of wasm binary loading/compilation process,
 * you must wait until the compilation complete before calling any functions.
 *
 * `init()` is idempotent, that means calling it multiple times will NOT re-initialize
 * or create new instance of the wasm module.
 *
 * ### Usage
 *
 * Normally you would just want to be notified when ready:
 * ```
 * import { init, EMA } from 'talib.js';
 *
 * await init();
 * EMA(...);
 * ```
 *
 * In case you want to directly interact with the emscripten wasm [Module API](https://emscripten.org/docs/api_reference/module.html),
 * just obtain the `Module` object from the promise.
 * ```
 * const Module = await init()
 * Module.ccall(...)
 * Module._malloc(...)
 * Module.HEAPF64
 * ```
 *
 * @category Initialization
 * @param wasmBinaryFilePath - optional, a string that specifies the location of wasm binary file
 * @returns A promise that resolves to the emscripten runtime `Module` object. See {@link https://emscripten.org/docs/api_reference/module.html}.
 */
export function init(wasmBinaryFilePath?: string) {
  if (TA_WASM) return Promise.resolve(TA_WASM);

  if (wasmBinaryFilePath && typeof wasmBinaryFilePath !== 'string') {
    return Promise.reject(
      new Error(
        'Invalid argument, "init(wasmBinaryFilePath)" expects a string that specifies the location of wasm binary file'
      )
    );
  }

  const locateFile = wasmBinaryFilePath ? () => wasmBinaryFilePath : undefined;
  return __INIT__({ locateFile })
    .then((Module) => (TA_WASM = Module))
    .catch((e) => {
      let message = 'TA-Lib WASM runtime init fail.';
      if (e && e.message) {
        message += '\nError: \n' + e.message;
      } else {
        message +=
          'Unknown reason. Perhaps you specify the wrong file path to wasm binary?';
      }
      throw new Error(message);
    });
}
/** @internal */
let __ACCBANDS_API__: any = API['ACCBANDS'];
/**
 * Acceleration Bands
 *
 * @alias accBands
 * @category Overlap Studies
 */
export function ACCBANDS(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 20
   */
  timePeriod?: number;
}): { upperBand: number[]; middleBand: number[]; lowerBand: number[] } {
  return callFunc(__ACCBANDS_API__, params);
}

/** @hidden */
export const accBands = ACCBANDS;

/** @internal */
let __ACOS_API__: any = API['ACOS'];
/**
 * Vector Trigonometric ACos
 *
 * @alias acos
 * @category Math Transform
 */
export function ACOS(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__ACOS_API__, params);
}

/** @hidden */
export const acos = ACOS;

/** @internal */
let __AD_API__: any = API['AD'];
/**
 * Chaikin A/D Line
 *
 * @alias ad
 * @category Volume Indicators
 */
export function AD(params: {
  high: number[];
  low: number[];
  close: number[];
  volume: number[];
}): { output: number[] } {
  return callFunc(__AD_API__, params);
}

/** @hidden */
export const ad = AD;

/** @internal */
let __ADD_API__: any = API['ADD'];
/**
 * Vector Arithmetic Add
 *
 * @alias add
 * @category Math Operators
 */
export function ADD(params: {
  inReal0: number[];
  inReal1: number[];
}): { output: number[] } {
  return callFunc(__ADD_API__, params);
}

/** @hidden */
export const add = ADD;

/** @internal */
let __ADOSC_API__: any = API['ADOSC'];
/**
 * Chaikin A/D Oscillator
 *
 * @alias adOsc
 * @category Volume Indicators
 */
export function ADOSC(params: {
  high: number[];
  low: number[];
  close: number[];
  volume: number[];
  /**
   * Fast Period  
   * Number of period for the fast MA. (Integer, min: 2, max: 100000)
   * @defaultValue 3
   */
  fastPeriod?: number;
  /**
   * Slow Period  
   * Number of period for the slow MA. (Integer, min: 2, max: 100000)
   * @defaultValue 10
   */
  slowPeriod?: number;
}): { output: number[] } {
  return callFunc(__ADOSC_API__, params);
}

/** @hidden */
export const adOsc = ADOSC;

/** @internal */
let __ADX_API__: any = API['ADX'];
/**
 * Average Directional Movement Index
 *
 * @alias adx
 * @category Momentum Indicators
 */
export function ADX(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__ADX_API__, params);
}

/** @hidden */
export const adx = ADX;

/** @internal */
let __ADXR_API__: any = API['ADXR'];
/**
 * Average Directional Movement Index Rating
 *
 * @alias adxr
 * @category Momentum Indicators
 */
export function ADXR(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__ADXR_API__, params);
}

/** @hidden */
export const adxr = ADXR;

/** @internal */
let __APO_API__: any = API['APO'];
/**
 * Absolute Price Oscillator
 *
 * @alias apo
 * @category Momentum Indicators
 */
export function APO(params: {
  inReal: number[];
  /**
   * Fast Period  
   * Number of period for the fast MA. (Integer, min: 2, max: 100000)
   * @defaultValue 12
   */
  fastPeriod?: number;
  /**
   * Slow Period  
   * Number of period for the slow MA. (Integer, min: 2, max: 100000)
   * @defaultValue 26
   */
  slowPeriod?: number;
  /**
   * MA Type  
   * Type of Moving Average. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  MAType?: MAType;
}): { output: number[] } {
  return callFunc(__APO_API__, params);
}

/** @hidden */
export const apo = APO;

/** @internal */
let __AROON_API__: any = API['AROON'];
/**
 * Aroon
 *
 * @alias aroon
 * @category Momentum Indicators
 */
export function AROON(params: {
  high: number[];
  low: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { aroonDown: number[]; aroonUp: number[] } {
  return callFunc(__AROON_API__, params);
}

/** @hidden */
export const aroon = AROON;

/** @internal */
let __AROONOSC_API__: any = API['AROONOSC'];
/**
 * Aroon Oscillator
 *
 * @alias aroonOsc
 * @category Momentum Indicators
 */
export function AROONOSC(params: {
  high: number[];
  low: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__AROONOSC_API__, params);
}

/** @hidden */
export const aroonOsc = AROONOSC;

/** @internal */
let __ASIN_API__: any = API['ASIN'];
/**
 * Vector Trigonometric ASin
 *
 * @alias asin
 * @category Math Transform
 */
export function ASIN(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__ASIN_API__, params);
}

/** @hidden */
export const asin = ASIN;

/** @internal */
let __ATAN_API__: any = API['ATAN'];
/**
 * Vector Trigonometric ATan
 *
 * @alias atan
 * @category Math Transform
 */
export function ATAN(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__ATAN_API__, params);
}

/** @hidden */
export const atan = ATAN;

/** @internal */
let __ATR_API__: any = API['ATR'];
/**
 * Average True Range
 *
 * @alias atr
 * @category Volatility Indicators
 */
export function ATR(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__ATR_API__, params);
}

/** @hidden */
export const atr = ATR;

/** @internal */
let __AVGDEV_API__: any = API['AVGDEV'];
/**
 * Average Deviation
 *
 * @alias avgDev
 * @category Price Transform
 */
export function AVGDEV(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__AVGDEV_API__, params);
}

/** @hidden */
export const avgDev = AVGDEV;

/** @internal */
let __AVGPRICE_API__: any = API['AVGPRICE'];
/**
 * Average Price
 *
 * @alias avgPrice
 * @category Price Transform
 */
export function AVGPRICE(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__AVGPRICE_API__, params);
}

/** @hidden */
export const avgPrice = AVGPRICE;

/** @internal */
let __BBANDS_API__: any = API['BBANDS'];
/**
 * Bollinger Bands
 *
 * @alias bbands
 * @category Overlap Studies
 */
export function BBANDS(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 5
   */
  timePeriod?: number;
  /**
   * Deviations up  
   * Deviation multiplier for upper band. (Double, min: -3e+37, max: 3e+37)
   * @defaultValue 2
   */
  nbDevUp?: number;
  /**
   * Deviations down  
   * Deviation multiplier for lower band. (Double, min: -3e+37, max: 3e+37)
   * @defaultValue 2
   */
  nbDevDn?: number;
  /**
   * MA Type  
   * Type of Moving Average. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  MAType?: MAType;
}): { upperBand: number[]; middleBand: number[]; lowerBand: number[] } {
  return callFunc(__BBANDS_API__, params);
}

/** @hidden */
export const bbands = BBANDS;

/** @internal */
let __BETA_API__: any = API['BETA'];
/**
 * Beta
 *
 * @alias beta
 * @category Statistic Functions
 */
export function BETA(params: {
  inReal0: number[];
  inReal1: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 5
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__BETA_API__, params);
}

/** @hidden */
export const beta = BETA;

/** @internal */
let __BOP_API__: any = API['BOP'];
/**
 * Balance Of Power
 *
 * @alias bop
 * @category Momentum Indicators
 */
export function BOP(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__BOP_API__, params);
}

/** @hidden */
export const bop = BOP;

/** @internal */
let __CCI_API__: any = API['CCI'];
/**
 * Commodity Channel Index
 *
 * @alias cci
 * @category Momentum Indicators
 */
export function CCI(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__CCI_API__, params);
}

/** @hidden */
export const cci = CCI;

/** @internal */
let __CDL2CROWS_API__: any = API['CDL2CROWS'];
/**
 * Two Crows
 *
 * @alias cdl2Crows
 * @category Pattern Recognition
 */
export function CDL2CROWS(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDL2CROWS_API__, params);
}

/** @hidden */
export const cdl2Crows = CDL2CROWS;

/** @internal */
let __CDL3BLACKCROWS_API__: any = API['CDL3BLACKCROWS'];
/**
 * Three Black Crows
 *
 * @alias cdl3BlackCrows
 * @category Pattern Recognition
 */
export function CDL3BLACKCROWS(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDL3BLACKCROWS_API__, params);
}

/** @hidden */
export const cdl3BlackCrows = CDL3BLACKCROWS;

/** @internal */
let __CDL3INSIDE_API__: any = API['CDL3INSIDE'];
/**
 * Three Inside Up/Down
 *
 * @alias cdl3Inside
 * @category Pattern Recognition
 */
export function CDL3INSIDE(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDL3INSIDE_API__, params);
}

/** @hidden */
export const cdl3Inside = CDL3INSIDE;

/** @internal */
let __CDL3LINESTRIKE_API__: any = API['CDL3LINESTRIKE'];
/**
 * Three-Line Strike 
 *
 * @alias cdl3LineStrike
 * @category Pattern Recognition
 */
export function CDL3LINESTRIKE(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDL3LINESTRIKE_API__, params);
}

/** @hidden */
export const cdl3LineStrike = CDL3LINESTRIKE;

/** @internal */
let __CDL3OUTSIDE_API__: any = API['CDL3OUTSIDE'];
/**
 * Three Outside Up/Down
 *
 * @alias cdl3Outside
 * @category Pattern Recognition
 */
export function CDL3OUTSIDE(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDL3OUTSIDE_API__, params);
}

/** @hidden */
export const cdl3Outside = CDL3OUTSIDE;

/** @internal */
let __CDL3STARSINSOUTH_API__: any = API['CDL3STARSINSOUTH'];
/**
 * Three Stars In The South
 *
 * @alias cdl3StarsInSouth
 * @category Pattern Recognition
 */
export function CDL3STARSINSOUTH(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDL3STARSINSOUTH_API__, params);
}

/** @hidden */
export const cdl3StarsInSouth = CDL3STARSINSOUTH;

/** @internal */
let __CDL3WHITESOLDIERS_API__: any = API['CDL3WHITESOLDIERS'];
/**
 * Three Advancing White Soldiers
 *
 * @alias cdl3WhiteSoldiers
 * @category Pattern Recognition
 */
export function CDL3WHITESOLDIERS(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDL3WHITESOLDIERS_API__, params);
}

/** @hidden */
export const cdl3WhiteSoldiers = CDL3WHITESOLDIERS;

/** @internal */
let __CDLABANDONEDBABY_API__: any = API['CDLABANDONEDBABY'];
/**
 * Abandoned Baby
 *
 * @alias cdlAbandonedBaby
 * @category Pattern Recognition
 */
export function CDLABANDONEDBABY(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
  /**
   * Penetration  
   * Percentage of penetration of a candle within another candle. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.3
   */
  penetration?: number;
}): { output: number[] } {
  return callFunc(__CDLABANDONEDBABY_API__, params);
}

/** @hidden */
export const cdlAbandonedBaby = CDLABANDONEDBABY;

/** @internal */
let __CDLADVANCEBLOCK_API__: any = API['CDLADVANCEBLOCK'];
/**
 * Advance Block
 *
 * @alias cdlAdvanceBlock
 * @category Pattern Recognition
 */
export function CDLADVANCEBLOCK(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLADVANCEBLOCK_API__, params);
}

/** @hidden */
export const cdlAdvanceBlock = CDLADVANCEBLOCK;

/** @internal */
let __CDLBELTHOLD_API__: any = API['CDLBELTHOLD'];
/**
 * Belt-hold
 *
 * @alias cdlBeltHold
 * @category Pattern Recognition
 */
export function CDLBELTHOLD(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLBELTHOLD_API__, params);
}

/** @hidden */
export const cdlBeltHold = CDLBELTHOLD;

/** @internal */
let __CDLBREAKAWAY_API__: any = API['CDLBREAKAWAY'];
/**
 * Breakaway
 *
 * @alias cdlBreakaway
 * @category Pattern Recognition
 */
export function CDLBREAKAWAY(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLBREAKAWAY_API__, params);
}

/** @hidden */
export const cdlBreakaway = CDLBREAKAWAY;

/** @internal */
let __CDLCLOSINGMARUBOZU_API__: any = API['CDLCLOSINGMARUBOZU'];
/**
 * Closing Marubozu
 *
 * @alias cdlClosingMarubozu
 * @category Pattern Recognition
 */
export function CDLCLOSINGMARUBOZU(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLCLOSINGMARUBOZU_API__, params);
}

/** @hidden */
export const cdlClosingMarubozu = CDLCLOSINGMARUBOZU;

/** @internal */
let __CDLCONCEALBABYSWALL_API__: any = API['CDLCONCEALBABYSWALL'];
/**
 * Concealing Baby Swallow
 *
 * @alias cdlConcealBabysWall
 * @category Pattern Recognition
 */
export function CDLCONCEALBABYSWALL(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLCONCEALBABYSWALL_API__, params);
}

/** @hidden */
export const cdlConcealBabysWall = CDLCONCEALBABYSWALL;

/** @internal */
let __CDLCOUNTERATTACK_API__: any = API['CDLCOUNTERATTACK'];
/**
 * Counterattack
 *
 * @alias cdlCounterAttack
 * @category Pattern Recognition
 */
export function CDLCOUNTERATTACK(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLCOUNTERATTACK_API__, params);
}

/** @hidden */
export const cdlCounterAttack = CDLCOUNTERATTACK;

/** @internal */
let __CDLDARKCLOUDCOVER_API__: any = API['CDLDARKCLOUDCOVER'];
/**
 * Dark Cloud Cover
 *
 * @alias cdlDarkCloudCover
 * @category Pattern Recognition
 */
export function CDLDARKCLOUDCOVER(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
  /**
   * Penetration  
   * Percentage of penetration of a candle within another candle. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.5
   */
  penetration?: number;
}): { output: number[] } {
  return callFunc(__CDLDARKCLOUDCOVER_API__, params);
}

/** @hidden */
export const cdlDarkCloudCover = CDLDARKCLOUDCOVER;

/** @internal */
let __CDLDOJI_API__: any = API['CDLDOJI'];
/**
 * Doji
 *
 * @alias cdlDoji
 * @category Pattern Recognition
 */
export function CDLDOJI(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLDOJI_API__, params);
}

/** @hidden */
export const cdlDoji = CDLDOJI;

/** @internal */
let __CDLDOJISTAR_API__: any = API['CDLDOJISTAR'];
/**
 * Doji Star
 *
 * @alias cdlDojiStar
 * @category Pattern Recognition
 */
export function CDLDOJISTAR(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLDOJISTAR_API__, params);
}

/** @hidden */
export const cdlDojiStar = CDLDOJISTAR;

/** @internal */
let __CDLDRAGONFLYDOJI_API__: any = API['CDLDRAGONFLYDOJI'];
/**
 * Dragonfly Doji
 *
 * @alias cdlDragonflyDoji
 * @category Pattern Recognition
 */
export function CDLDRAGONFLYDOJI(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLDRAGONFLYDOJI_API__, params);
}

/** @hidden */
export const cdlDragonflyDoji = CDLDRAGONFLYDOJI;

/** @internal */
let __CDLENGULFING_API__: any = API['CDLENGULFING'];
/**
 * Engulfing Pattern
 *
 * @alias cdlEngulfing
 * @category Pattern Recognition
 */
export function CDLENGULFING(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLENGULFING_API__, params);
}

/** @hidden */
export const cdlEngulfing = CDLENGULFING;

/** @internal */
let __CDLEVENINGDOJISTAR_API__: any = API['CDLEVENINGDOJISTAR'];
/**
 * Evening Doji Star
 *
 * @alias cdlEveningDojiStar
 * @category Pattern Recognition
 */
export function CDLEVENINGDOJISTAR(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
  /**
   * Penetration  
   * Percentage of penetration of a candle within another candle. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.3
   */
  penetration?: number;
}): { output: number[] } {
  return callFunc(__CDLEVENINGDOJISTAR_API__, params);
}

/** @hidden */
export const cdlEveningDojiStar = CDLEVENINGDOJISTAR;

/** @internal */
let __CDLEVENINGSTAR_API__: any = API['CDLEVENINGSTAR'];
/**
 * Evening Star
 *
 * @alias cdlEveningStar
 * @category Pattern Recognition
 */
export function CDLEVENINGSTAR(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
  /**
   * Penetration  
   * Percentage of penetration of a candle within another candle. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.3
   */
  penetration?: number;
}): { output: number[] } {
  return callFunc(__CDLEVENINGSTAR_API__, params);
}

/** @hidden */
export const cdlEveningStar = CDLEVENINGSTAR;

/** @internal */
let __CDLGAPSIDESIDEWHITE_API__: any = API['CDLGAPSIDESIDEWHITE'];
/**
 * Up/Down-gap side-by-side white lines
 *
 * @alias cdlGapSideSideWhite
 * @category Pattern Recognition
 */
export function CDLGAPSIDESIDEWHITE(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLGAPSIDESIDEWHITE_API__, params);
}

/** @hidden */
export const cdlGapSideSideWhite = CDLGAPSIDESIDEWHITE;

/** @internal */
let __CDLGRAVESTONEDOJI_API__: any = API['CDLGRAVESTONEDOJI'];
/**
 * Gravestone Doji
 *
 * @alias cdlGravestoneDoji
 * @category Pattern Recognition
 */
export function CDLGRAVESTONEDOJI(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLGRAVESTONEDOJI_API__, params);
}

/** @hidden */
export const cdlGravestoneDoji = CDLGRAVESTONEDOJI;

/** @internal */
let __CDLHAMMER_API__: any = API['CDLHAMMER'];
/**
 * Hammer
 *
 * @alias cdlHammer
 * @category Pattern Recognition
 */
export function CDLHAMMER(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLHAMMER_API__, params);
}

/** @hidden */
export const cdlHammer = CDLHAMMER;

/** @internal */
let __CDLHANGINGMAN_API__: any = API['CDLHANGINGMAN'];
/**
 * Hanging Man
 *
 * @alias cdlHangingMan
 * @category Pattern Recognition
 */
export function CDLHANGINGMAN(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLHANGINGMAN_API__, params);
}

/** @hidden */
export const cdlHangingMan = CDLHANGINGMAN;

/** @internal */
let __CDLHARAMI_API__: any = API['CDLHARAMI'];
/**
 * Harami Pattern
 *
 * @alias cdlHarami
 * @category Pattern Recognition
 */
export function CDLHARAMI(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLHARAMI_API__, params);
}

/** @hidden */
export const cdlHarami = CDLHARAMI;

/** @internal */
let __CDLHARAMICROSS_API__: any = API['CDLHARAMICROSS'];
/**
 * Harami Cross Pattern
 *
 * @alias cdlHaramiCross
 * @category Pattern Recognition
 */
export function CDLHARAMICROSS(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLHARAMICROSS_API__, params);
}

/** @hidden */
export const cdlHaramiCross = CDLHARAMICROSS;

/** @internal */
let __CDLHIGHWAVE_API__: any = API['CDLHIGHWAVE'];
/**
 * High-Wave Candle
 *
 * @alias cdlHignWave
 * @category Pattern Recognition
 */
export function CDLHIGHWAVE(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLHIGHWAVE_API__, params);
}

/** @hidden */
export const cdlHignWave = CDLHIGHWAVE;

/** @internal */
let __CDLHIKKAKE_API__: any = API['CDLHIKKAKE'];
/**
 * Hikkake Pattern
 *
 * @alias cdlHikkake
 * @category Pattern Recognition
 */
export function CDLHIKKAKE(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLHIKKAKE_API__, params);
}

/** @hidden */
export const cdlHikkake = CDLHIKKAKE;

/** @internal */
let __CDLHIKKAKEMOD_API__: any = API['CDLHIKKAKEMOD'];
/**
 * Modified Hikkake Pattern
 *
 * @alias cdlHikkakeMod
 * @category Pattern Recognition
 */
export function CDLHIKKAKEMOD(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLHIKKAKEMOD_API__, params);
}

/** @hidden */
export const cdlHikkakeMod = CDLHIKKAKEMOD;

/** @internal */
let __CDLHOMINGPIGEON_API__: any = API['CDLHOMINGPIGEON'];
/**
 * Homing Pigeon
 *
 * @alias cdlHomingPigeon
 * @category Pattern Recognition
 */
export function CDLHOMINGPIGEON(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLHOMINGPIGEON_API__, params);
}

/** @hidden */
export const cdlHomingPigeon = CDLHOMINGPIGEON;

/** @internal */
let __CDLIDENTICAL3CROWS_API__: any = API['CDLIDENTICAL3CROWS'];
/**
 * Identical Three Crows
 *
 * @alias cdlIdentical3Crows
 * @category Pattern Recognition
 */
export function CDLIDENTICAL3CROWS(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLIDENTICAL3CROWS_API__, params);
}

/** @hidden */
export const cdlIdentical3Crows = CDLIDENTICAL3CROWS;

/** @internal */
let __CDLINNECK_API__: any = API['CDLINNECK'];
/**
 * In-Neck Pattern
 *
 * @alias cdlInNeck
 * @category Pattern Recognition
 */
export function CDLINNECK(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLINNECK_API__, params);
}

/** @hidden */
export const cdlInNeck = CDLINNECK;

/** @internal */
let __CDLINVERTEDHAMMER_API__: any = API['CDLINVERTEDHAMMER'];
/**
 * Inverted Hammer
 *
 * @alias cdlInvertedHammer
 * @category Pattern Recognition
 */
export function CDLINVERTEDHAMMER(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLINVERTEDHAMMER_API__, params);
}

/** @hidden */
export const cdlInvertedHammer = CDLINVERTEDHAMMER;

/** @internal */
let __CDLKICKING_API__: any = API['CDLKICKING'];
/**
 * Kicking
 *
 * @alias cdlKicking
 * @category Pattern Recognition
 */
export function CDLKICKING(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLKICKING_API__, params);
}

/** @hidden */
export const cdlKicking = CDLKICKING;

/** @internal */
let __CDLKICKINGBYLENGTH_API__: any = API['CDLKICKINGBYLENGTH'];
/**
 * Kicking - bull/bear determined by the longer marubozu
 *
 * @alias cdlKickingByLength
 * @category Pattern Recognition
 */
export function CDLKICKINGBYLENGTH(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLKICKINGBYLENGTH_API__, params);
}

/** @hidden */
export const cdlKickingByLength = CDLKICKINGBYLENGTH;

/** @internal */
let __CDLLADDERBOTTOM_API__: any = API['CDLLADDERBOTTOM'];
/**
 * Ladder Bottom
 *
 * @alias cdlLadderBottom
 * @category Pattern Recognition
 */
export function CDLLADDERBOTTOM(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLLADDERBOTTOM_API__, params);
}

/** @hidden */
export const cdlLadderBottom = CDLLADDERBOTTOM;

/** @internal */
let __CDLLONGLEGGEDDOJI_API__: any = API['CDLLONGLEGGEDDOJI'];
/**
 * Long Legged Doji
 *
 * @alias cdlLongLeggedDoji
 * @category Pattern Recognition
 */
export function CDLLONGLEGGEDDOJI(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLLONGLEGGEDDOJI_API__, params);
}

/** @hidden */
export const cdlLongLeggedDoji = CDLLONGLEGGEDDOJI;

/** @internal */
let __CDLLONGLINE_API__: any = API['CDLLONGLINE'];
/**
 * Long Line Candle
 *
 * @alias cdlLongLine
 * @category Pattern Recognition
 */
export function CDLLONGLINE(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLLONGLINE_API__, params);
}

/** @hidden */
export const cdlLongLine = CDLLONGLINE;

/** @internal */
let __CDLMARUBOZU_API__: any = API['CDLMARUBOZU'];
/**
 * Marubozu
 *
 * @alias cdlMarubozu
 * @category Pattern Recognition
 */
export function CDLMARUBOZU(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLMARUBOZU_API__, params);
}

/** @hidden */
export const cdlMarubozu = CDLMARUBOZU;

/** @internal */
let __CDLMATCHINGLOW_API__: any = API['CDLMATCHINGLOW'];
/**
 * Matching Low
 *
 * @alias cdlMatchingLow
 * @category Pattern Recognition
 */
export function CDLMATCHINGLOW(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLMATCHINGLOW_API__, params);
}

/** @hidden */
export const cdlMatchingLow = CDLMATCHINGLOW;

/** @internal */
let __CDLMATHOLD_API__: any = API['CDLMATHOLD'];
/**
 * Mat Hold
 *
 * @alias cdlMatHold
 * @category Pattern Recognition
 */
export function CDLMATHOLD(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
  /**
   * Penetration  
   * Percentage of penetration of a candle within another candle. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.5
   */
  penetration?: number;
}): { output: number[] } {
  return callFunc(__CDLMATHOLD_API__, params);
}

/** @hidden */
export const cdlMatHold = CDLMATHOLD;

/** @internal */
let __CDLMORNINGDOJISTAR_API__: any = API['CDLMORNINGDOJISTAR'];
/**
 * Morning Doji Star
 *
 * @alias cdlMorningDojiStar
 * @category Pattern Recognition
 */
export function CDLMORNINGDOJISTAR(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
  /**
   * Penetration  
   * Percentage of penetration of a candle within another candle. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.3
   */
  penetration?: number;
}): { output: number[] } {
  return callFunc(__CDLMORNINGDOJISTAR_API__, params);
}

/** @hidden */
export const cdlMorningDojiStar = CDLMORNINGDOJISTAR;

/** @internal */
let __CDLMORNINGSTAR_API__: any = API['CDLMORNINGSTAR'];
/**
 * Morning Star
 *
 * @alias cdlMorningStar
 * @category Pattern Recognition
 */
export function CDLMORNINGSTAR(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
  /**
   * Penetration  
   * Percentage of penetration of a candle within another candle. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.3
   */
  penetration?: number;
}): { output: number[] } {
  return callFunc(__CDLMORNINGSTAR_API__, params);
}

/** @hidden */
export const cdlMorningStar = CDLMORNINGSTAR;

/** @internal */
let __CDLONNECK_API__: any = API['CDLONNECK'];
/**
 * On-Neck Pattern
 *
 * @alias cdlOnNeck
 * @category Pattern Recognition
 */
export function CDLONNECK(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLONNECK_API__, params);
}

/** @hidden */
export const cdlOnNeck = CDLONNECK;

/** @internal */
let __CDLPIERCING_API__: any = API['CDLPIERCING'];
/**
 * Piercing Pattern
 *
 * @alias cdlPiercing
 * @category Pattern Recognition
 */
export function CDLPIERCING(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLPIERCING_API__, params);
}

/** @hidden */
export const cdlPiercing = CDLPIERCING;

/** @internal */
let __CDLRICKSHAWMAN_API__: any = API['CDLRICKSHAWMAN'];
/**
 * Rickshaw Man
 *
 * @alias cdlRickshawMan
 * @category Pattern Recognition
 */
export function CDLRICKSHAWMAN(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLRICKSHAWMAN_API__, params);
}

/** @hidden */
export const cdlRickshawMan = CDLRICKSHAWMAN;

/** @internal */
let __CDLRISEFALL3METHODS_API__: any = API['CDLRISEFALL3METHODS'];
/**
 * Rising/Falling Three Methods
 *
 * @alias cdlRiseFall3Methods
 * @category Pattern Recognition
 */
export function CDLRISEFALL3METHODS(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLRISEFALL3METHODS_API__, params);
}

/** @hidden */
export const cdlRiseFall3Methods = CDLRISEFALL3METHODS;

/** @internal */
let __CDLSEPARATINGLINES_API__: any = API['CDLSEPARATINGLINES'];
/**
 * Separating Lines
 *
 * @alias cdlSeperatingLines
 * @category Pattern Recognition
 */
export function CDLSEPARATINGLINES(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLSEPARATINGLINES_API__, params);
}

/** @hidden */
export const cdlSeperatingLines = CDLSEPARATINGLINES;

/** @internal */
let __CDLSHOOTINGSTAR_API__: any = API['CDLSHOOTINGSTAR'];
/**
 * Shooting Star
 *
 * @alias cdlShootingStar
 * @category Pattern Recognition
 */
export function CDLSHOOTINGSTAR(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLSHOOTINGSTAR_API__, params);
}

/** @hidden */
export const cdlShootingStar = CDLSHOOTINGSTAR;

/** @internal */
let __CDLSHORTLINE_API__: any = API['CDLSHORTLINE'];
/**
 * Short Line Candle
 *
 * @alias cdlShortLine
 * @category Pattern Recognition
 */
export function CDLSHORTLINE(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLSHORTLINE_API__, params);
}

/** @hidden */
export const cdlShortLine = CDLSHORTLINE;

/** @internal */
let __CDLSPINNINGTOP_API__: any = API['CDLSPINNINGTOP'];
/**
 * Spinning Top
 *
 * @alias cdlSpinningTop
 * @category Pattern Recognition
 */
export function CDLSPINNINGTOP(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLSPINNINGTOP_API__, params);
}

/** @hidden */
export const cdlSpinningTop = CDLSPINNINGTOP;

/** @internal */
let __CDLSTALLEDPATTERN_API__: any = API['CDLSTALLEDPATTERN'];
/**
 * Stalled Pattern
 *
 * @alias cdlStalledPattern
 * @category Pattern Recognition
 */
export function CDLSTALLEDPATTERN(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLSTALLEDPATTERN_API__, params);
}

/** @hidden */
export const cdlStalledPattern = CDLSTALLEDPATTERN;

/** @internal */
let __CDLSTICKSANDWICH_API__: any = API['CDLSTICKSANDWICH'];
/**
 * Stick Sandwich
 *
 * @alias cdlStickSandwhich
 * @category Pattern Recognition
 */
export function CDLSTICKSANDWICH(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLSTICKSANDWICH_API__, params);
}

/** @hidden */
export const cdlStickSandwhich = CDLSTICKSANDWICH;

/** @internal */
let __CDLTAKURI_API__: any = API['CDLTAKURI'];
/**
 * Takuri (Dragonfly Doji with very long lower shadow)
 *
 * @alias cdlTakuri
 * @category Pattern Recognition
 */
export function CDLTAKURI(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLTAKURI_API__, params);
}

/** @hidden */
export const cdlTakuri = CDLTAKURI;

/** @internal */
let __CDLTASUKIGAP_API__: any = API['CDLTASUKIGAP'];
/**
 * Tasuki Gap
 *
 * @alias cdlTasukiGap
 * @category Pattern Recognition
 */
export function CDLTASUKIGAP(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLTASUKIGAP_API__, params);
}

/** @hidden */
export const cdlTasukiGap = CDLTASUKIGAP;

/** @internal */
let __CDLTHRUSTING_API__: any = API['CDLTHRUSTING'];
/**
 * Thrusting Pattern
 *
 * @alias cdlThrusting
 * @category Pattern Recognition
 */
export function CDLTHRUSTING(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLTHRUSTING_API__, params);
}

/** @hidden */
export const cdlThrusting = CDLTHRUSTING;

/** @internal */
let __CDLTRISTAR_API__: any = API['CDLTRISTAR'];
/**
 * Tristar Pattern
 *
 * @alias cdlTristar
 * @category Pattern Recognition
 */
export function CDLTRISTAR(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLTRISTAR_API__, params);
}

/** @hidden */
export const cdlTristar = CDLTRISTAR;

/** @internal */
let __CDLUNIQUE3RIVER_API__: any = API['CDLUNIQUE3RIVER'];
/**
 * Unique 3 River
 *
 * @alias cdlUnique3River
 * @category Pattern Recognition
 */
export function CDLUNIQUE3RIVER(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLUNIQUE3RIVER_API__, params);
}

/** @hidden */
export const cdlUnique3River = CDLUNIQUE3RIVER;

/** @internal */
let __CDLUPSIDEGAP2CROWS_API__: any = API['CDLUPSIDEGAP2CROWS'];
/**
 * Upside Gap Two Crows
 *
 * @alias cdlUpsideGap2Crows
 * @category Pattern Recognition
 */
export function CDLUPSIDEGAP2CROWS(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLUPSIDEGAP2CROWS_API__, params);
}

/** @hidden */
export const cdlUpsideGap2Crows = CDLUPSIDEGAP2CROWS;

/** @internal */
let __CDLXSIDEGAP3METHODS_API__: any = API['CDLXSIDEGAP3METHODS'];
/**
 * Upside/Downside Gap Three Methods
 *
 * @alias cdlXSideGap3Methods
 * @category Pattern Recognition
 */
export function CDLXSIDEGAP3METHODS(params: {
  open: number[];
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__CDLXSIDEGAP3METHODS_API__, params);
}

/** @hidden */
export const cdlXSideGap3Methods = CDLXSIDEGAP3METHODS;

/** @internal */
let __CEIL_API__: any = API['CEIL'];
/**
 * Vector Ceil
 *
 * @alias ceil
 * @category Math Transform
 */
export function CEIL(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__CEIL_API__, params);
}

/** @hidden */
export const ceil = CEIL;

/** @internal */
let __CMO_API__: any = API['CMO'];
/**
 * Chande Momentum Oscillator
 *
 * @alias cmo
 * @category Momentum Indicators
 */
export function CMO(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__CMO_API__, params);
}

/** @hidden */
export const cmo = CMO;

/** @internal */
let __CORREL_API__: any = API['CORREL'];
/**
 * Pearson's Correlation Coefficient (r)
 *
 * @alias correl
 * @category Statistic Functions
 */
export function CORREL(params: {
  inReal0: number[];
  inReal1: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__CORREL_API__, params);
}

/** @hidden */
export const correl = CORREL;

/** @internal */
let __COS_API__: any = API['COS'];
/**
 * Vector Trigonometric Cos
 *
 * @alias cos
 * @category Math Transform
 */
export function COS(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__COS_API__, params);
}

/** @hidden */
export const cos = COS;

/** @internal */
let __COSH_API__: any = API['COSH'];
/**
 * Vector Trigonometric Cosh
 *
 * @alias cosh
 * @category Math Transform
 */
export function COSH(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__COSH_API__, params);
}

/** @hidden */
export const cosh = COSH;

/** @internal */
let __DEMA_API__: any = API['DEMA'];
/**
 * Double Exponential Moving Average
 *
 * @alias dema
 * @category Overlap Studies
 */
export function DEMA(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__DEMA_API__, params);
}

/** @hidden */
export const dema = DEMA;

/** @internal */
let __DIV_API__: any = API['DIV'];
/**
 * Vector Arithmetic Div
 *
 * @alias div
 * @category Math Operators
 */
export function DIV(params: {
  inReal0: number[];
  inReal1: number[];
}): { output: number[] } {
  return callFunc(__DIV_API__, params);
}

/** @hidden */
export const div = DIV;

/** @internal */
let __DX_API__: any = API['DX'];
/**
 * Directional Movement Index
 *
 * @alias dx
 * @category Momentum Indicators
 */
export function DX(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__DX_API__, params);
}

/** @hidden */
export const dx = DX;

/** @internal */
let __EMA_API__: any = API['EMA'];
/**
 * Exponential Moving Average
 *
 * @alias ema
 * @category Overlap Studies
 */
export function EMA(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__EMA_API__, params);
}

/** @hidden */
export const ema = EMA;

/** @internal */
let __EXP_API__: any = API['EXP'];
/**
 * Vector Arithmetic Exp
 *
 * @alias exp
 * @category Math Transform
 */
export function EXP(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__EXP_API__, params);
}

/** @hidden */
export const exp = EXP;

/** @internal */
let __FLOOR_API__: any = API['FLOOR'];
/**
 * Vector Floor
 *
 * @alias floor
 * @category Math Transform
 */
export function FLOOR(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__FLOOR_API__, params);
}

/** @hidden */
export const floor = FLOOR;

/** @internal */
let __HT_DCPERIOD_API__: any = API['HT_DCPERIOD'];
/**
 * Hilbert Transform - Dominant Cycle Period
 *
 * @alias htDcPeriod
 * @category Cycle Indicators
 */
export function HT_DCPERIOD(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__HT_DCPERIOD_API__, params);
}

/** @hidden */
export const htDcPeriod = HT_DCPERIOD;

/** @internal */
let __HT_DCPHASE_API__: any = API['HT_DCPHASE'];
/**
 * Hilbert Transform - Dominant Cycle Phase
 *
 * @alias htDcPhase
 * @category Cycle Indicators
 */
export function HT_DCPHASE(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__HT_DCPHASE_API__, params);
}

/** @hidden */
export const htDcPhase = HT_DCPHASE;

/** @internal */
let __HT_PHASOR_API__: any = API['HT_PHASOR'];
/**
 * Hilbert Transform - Phasor Components
 *
 * @alias htPhasor
 * @category Cycle Indicators
 */
export function HT_PHASOR(params: {
  inReal: number[];
}): { inPhase: number[]; quadrature: number[] } {
  return callFunc(__HT_PHASOR_API__, params);
}

/** @hidden */
export const htPhasor = HT_PHASOR;

/** @internal */
let __HT_SINE_API__: any = API['HT_SINE'];
/**
 * Hilbert Transform - SineWave
 *
 * @alias htSine
 * @category Cycle Indicators
 */
export function HT_SINE(params: {
  inReal: number[];
}): { sine: number[]; leadSine: number[] } {
  return callFunc(__HT_SINE_API__, params);
}

/** @hidden */
export const htSine = HT_SINE;

/** @internal */
let __HT_TRENDLINE_API__: any = API['HT_TRENDLINE'];
/**
 * Hilbert Transform - Instantaneous Trendline
 *
 * @alias htTrendline
 * @category Overlap Studies
 */
export function HT_TRENDLINE(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__HT_TRENDLINE_API__, params);
}

/** @hidden */
export const htTrendline = HT_TRENDLINE;

/** @internal */
let __HT_TRENDMODE_API__: any = API['HT_TRENDMODE'];
/**
 * Hilbert Transform - Trend vs Cycle Mode
 *
 * @alias htTrendMode
 * @category Cycle Indicators
 */
export function HT_TRENDMODE(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__HT_TRENDMODE_API__, params);
}

/** @hidden */
export const htTrendMode = HT_TRENDMODE;

/** @internal */
let __IMI_API__: any = API['IMI'];
/**
 * Intraday Momentum Index
 *
 * @alias imi
 * @category Momentum Indicators
 */
export function IMI(params: {
  open: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__IMI_API__, params);
}

/** @hidden */
export const imi = IMI;

/** @internal */
let __KAMA_API__: any = API['KAMA'];
/**
 * Kaufman Adaptive Moving Average
 *
 * @alias kama
 * @category Overlap Studies
 */
export function KAMA(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__KAMA_API__, params);
}

/** @hidden */
export const kama = KAMA;

/** @internal */
let __LINEARREG_API__: any = API['LINEARREG'];
/**
 * Linear Regression
 *
 * @alias linearReg
 * @category Statistic Functions
 */
export function LINEARREG(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__LINEARREG_API__, params);
}

/** @hidden */
export const linearReg = LINEARREG;

/** @internal */
let __LINEARREG_ANGLE_API__: any = API['LINEARREG_ANGLE'];
/**
 * Linear Regression Angle
 *
 * @alias linearRegAngle
 * @category Statistic Functions
 */
export function LINEARREG_ANGLE(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__LINEARREG_ANGLE_API__, params);
}

/** @hidden */
export const linearRegAngle = LINEARREG_ANGLE;

/** @internal */
let __LINEARREG_INTERCEPT_API__: any = API['LINEARREG_INTERCEPT'];
/**
 * Linear Regression Intercept
 *
 * @alias linearRegIntercept
 * @category Statistic Functions
 */
export function LINEARREG_INTERCEPT(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__LINEARREG_INTERCEPT_API__, params);
}

/** @hidden */
export const linearRegIntercept = LINEARREG_INTERCEPT;

/** @internal */
let __LINEARREG_SLOPE_API__: any = API['LINEARREG_SLOPE'];
/**
 * Linear Regression Slope
 *
 * @alias linearRegSlope
 * @category Statistic Functions
 */
export function LINEARREG_SLOPE(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__LINEARREG_SLOPE_API__, params);
}

/** @hidden */
export const linearRegSlope = LINEARREG_SLOPE;

/** @internal */
let __LN_API__: any = API['LN'];
/**
 * Vector Log Natural
 *
 * @alias ln
 * @category Math Transform
 */
export function LN(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__LN_API__, params);
}

/** @hidden */
export const ln = LN;

/** @internal */
let __LOG10_API__: any = API['LOG10'];
/**
 * Vector Log10
 *
 * @alias log10
 * @category Math Transform
 */
export function LOG10(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__LOG10_API__, params);
}

/** @hidden */
export const log10 = LOG10;

/** @internal */
let __MA_API__: any = API['MA'];
/**
 * Moving average
 *
 * @alias movingAverage
 * @category Overlap Studies
 */
export function MA(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
  /**
   * MA Type  
   * Type of Moving Average. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  MAType?: MAType;
}): { output: number[] } {
  return callFunc(__MA_API__, params);
}

/** @hidden */
export const movingAverage = MA;

/** @internal */
let __MACD_API__: any = API['MACD'];
/**
 * Moving Average Convergence/Divergence
 *
 * @alias macd
 * @category Momentum Indicators
 */
export function MACD(params: {
  inReal: number[];
  /**
   * Fast Period  
   * Number of period for the fast MA. (Integer, min: 2, max: 100000)
   * @defaultValue 12
   */
  fastPeriod?: number;
  /**
   * Slow Period  
   * Number of period for the slow MA. (Integer, min: 2, max: 100000)
   * @defaultValue 26
   */
  slowPeriod?: number;
  /**
   * Signal Period  
   * Smoothing for the signal line (nb of period). (Integer, min: 1, max: 100000)
   * @defaultValue 9
   */
  signalPeriod?: number;
}): { MACD: number[]; MACDSignal: number[]; MACDHist: number[] } {
  return callFunc(__MACD_API__, params);
}

/** @hidden */
export const macd = MACD;

/** @internal */
let __MACDEXT_API__: any = API['MACDEXT'];
/**
 * MACD with controllable MA type
 *
 * @alias macdExt
 * @category Momentum Indicators
 */
export function MACDEXT(params: {
  inReal: number[];
  /**
   * Fast Period  
   * Number of period for the fast MA. (Integer, min: 2, max: 100000)
   * @defaultValue 12
   */
  fastPeriod?: number;
  /**
   * Fast MA  
   * Type of Moving Average for fast MA. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  fastMAType?: MAType;
  /**
   * Slow Period  
   * Number of period for the slow MA. (Integer, min: 2, max: 100000)
   * @defaultValue 26
   */
  slowPeriod?: number;
  /**
   * Slow MA  
   * Type of Moving Average for slow MA. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  slowMAType?: MAType;
  /**
   * Signal Period  
   * Smoothing for the signal line (nb of period). (Integer, min: 1, max: 100000)
   * @defaultValue 9
   */
  signalPeriod?: number;
  /**
   * Signal MA  
   * Type of Moving Average for signal line. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  signalMAType?: MAType;
}): { MACD: number[]; MACDSignal: number[]; MACDHist: number[] } {
  return callFunc(__MACDEXT_API__, params);
}

/** @hidden */
export const macdExt = MACDEXT;

/** @internal */
let __MACDFIX_API__: any = API['MACDFIX'];
/**
 * Moving Average Convergence/Divergence Fix 12/26
 *
 * @alias macdFix
 * @category Momentum Indicators
 */
export function MACDFIX(params: {
  inReal: number[];
  /**
   * Signal Period  
   * Smoothing for the signal line (nb of period). (Integer, min: 1, max: 100000)
   * @defaultValue 9
   */
  signalPeriod?: number;
}): { MACD: number[]; MACDSignal: number[]; MACDHist: number[] } {
  return callFunc(__MACDFIX_API__, params);
}

/** @hidden */
export const macdFix = MACDFIX;

/** @internal */
let __MAMA_API__: any = API['MAMA'];
/**
 * MESA Adaptive Moving Average
 *
 * @alias mama
 * @category Overlap Studies
 */
export function MAMA(params: {
  inReal: number[];
  /**
   * Fast Limit  
   * Upper limit use in the adaptive algorithm. (Double, min: 0.01, max: 0.99)
   * @defaultValue 0.5
   */
  fastLimit?: number;
  /**
   * Slow Limit  
   * Lower limit use in the adaptive algorithm. (Double, min: 0.01, max: 0.99)
   * @defaultValue 0.05
   */
  slowLimit?: number;
}): { MAMA: number[]; FAMA: number[] } {
  return callFunc(__MAMA_API__, params);
}

/** @hidden */
export const mama = MAMA;

/** @internal */
let __MAVP_API__: any = API['MAVP'];
/**
 * Moving average with variable period
 *
 * @alias movingAverageVariablePeriod
 * @category Overlap Studies
 */
export function MAVP(params: {
  inReal: number[];
  inPeriods: number[];
  /**
   * Minimum Period  
   * Value less than minimum will be changed to Minimum period. (Integer, min: 2, max: 100000)
   * @defaultValue 2
   */
  minPeriod?: number;
  /**
   * Maximum Period  
   * Value higher than maximum will be changed to Maximum period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  maxPeriod?: number;
  /**
   * MA Type  
   * Type of Moving Average. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  MAType?: MAType;
}): { output: number[] } {
  return callFunc(__MAVP_API__, params);
}

/** @hidden */
export const movingAverageVariablePeriod = MAVP;

/** @internal */
let __MAX_API__: any = API['MAX'];
/**
 * Highest value over a specified period
 *
 * @alias max
 * @category Math Operators
 */
export function MAX(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__MAX_API__, params);
}

/** @hidden */
export const max = MAX;

/** @internal */
let __MAXINDEX_API__: any = API['MAXINDEX'];
/**
 * Index of highest value over a specified period
 *
 * @alias maxIndex
 * @category Math Operators
 */
export function MAXINDEX(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__MAXINDEX_API__, params);
}

/** @hidden */
export const maxIndex = MAXINDEX;

/** @internal */
let __MEDPRICE_API__: any = API['MEDPRICE'];
/**
 * Median Price
 *
 * @alias medPrice
 * @category Price Transform
 */
export function MEDPRICE(params: {
  high: number[];
  low: number[];
}): { output: number[] } {
  return callFunc(__MEDPRICE_API__, params);
}

/** @hidden */
export const medPrice = MEDPRICE;

/** @internal */
let __MFI_API__: any = API['MFI'];
/**
 * Money Flow Index
 *
 * @alias mfi
 * @category Momentum Indicators
 */
export function MFI(params: {
  high: number[];
  low: number[];
  close: number[];
  volume: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__MFI_API__, params);
}

/** @hidden */
export const mfi = MFI;

/** @internal */
let __MIDPOINT_API__: any = API['MIDPOINT'];
/**
 * MidPoint over period
 *
 * @alias midPoint
 * @category Overlap Studies
 */
export function MIDPOINT(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__MIDPOINT_API__, params);
}

/** @hidden */
export const midPoint = MIDPOINT;

/** @internal */
let __MIDPRICE_API__: any = API['MIDPRICE'];
/**
 * Midpoint Price over period
 *
 * @alias midPrice
 * @category Overlap Studies
 */
export function MIDPRICE(params: {
  high: number[];
  low: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__MIDPRICE_API__, params);
}

/** @hidden */
export const midPrice = MIDPRICE;

/** @internal */
let __MIN_API__: any = API['MIN'];
/**
 * Lowest value over a specified period
 *
 * @alias min
 * @category Math Operators
 */
export function MIN(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__MIN_API__, params);
}

/** @hidden */
export const min = MIN;

/** @internal */
let __MININDEX_API__: any = API['MININDEX'];
/**
 * Index of lowest value over a specified period
 *
 * @alias minIndex
 * @category Math Operators
 */
export function MININDEX(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__MININDEX_API__, params);
}

/** @hidden */
export const minIndex = MININDEX;

/** @internal */
let __MINMAX_API__: any = API['MINMAX'];
/**
 * Lowest and highest values over a specified period
 *
 * @alias minMax
 * @category Math Operators
 */
export function MINMAX(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { min: number[]; max: number[] } {
  return callFunc(__MINMAX_API__, params);
}

/** @hidden */
export const minMax = MINMAX;

/** @internal */
let __MINMAXINDEX_API__: any = API['MINMAXINDEX'];
/**
 * Indexes of lowest and highest values over a specified period
 *
 * @alias minMaxIndex
 * @category Math Operators
 */
export function MINMAXINDEX(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { minIdx: number[]; maxIdx: number[] } {
  return callFunc(__MINMAXINDEX_API__, params);
}

/** @hidden */
export const minMaxIndex = MINMAXINDEX;

/** @internal */
let __MINUS_DI_API__: any = API['MINUS_DI'];
/**
 * Minus Directional Indicator
 *
 * @alias minusDI
 * @category Momentum Indicators
 */
export function MINUS_DI(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__MINUS_DI_API__, params);
}

/** @hidden */
export const minusDI = MINUS_DI;

/** @internal */
let __MINUS_DM_API__: any = API['MINUS_DM'];
/**
 * Minus Directional Movement
 *
 * @alias minusDM
 * @category Momentum Indicators
 */
export function MINUS_DM(params: {
  high: number[];
  low: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__MINUS_DM_API__, params);
}

/** @hidden */
export const minusDM = MINUS_DM;

/** @internal */
let __MOM_API__: any = API['MOM'];
/**
 * Momentum
 *
 * @alias mom
 * @category Momentum Indicators
 */
export function MOM(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 10
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__MOM_API__, params);
}

/** @hidden */
export const mom = MOM;

/** @internal */
let __MULT_API__: any = API['MULT'];
/**
 * Vector Arithmetic Mult
 *
 * @alias mult
 * @category Math Operators
 */
export function MULT(params: {
  inReal0: number[];
  inReal1: number[];
}): { output: number[] } {
  return callFunc(__MULT_API__, params);
}

/** @hidden */
export const mult = MULT;

/** @internal */
let __NATR_API__: any = API['NATR'];
/**
 * Normalized Average True Range
 *
 * @alias natr
 * @category Volatility Indicators
 */
export function NATR(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__NATR_API__, params);
}

/** @hidden */
export const natr = NATR;

/** @internal */
let __OBV_API__: any = API['OBV'];
/**
 * On Balance Volume
 *
 * @alias obv
 * @category Volume Indicators
 */
export function OBV(params: {
  inReal: number[];
  volume: number[];
}): { output: number[] } {
  return callFunc(__OBV_API__, params);
}

/** @hidden */
export const obv = OBV;

/** @internal */
let __PLUS_DI_API__: any = API['PLUS_DI'];
/**
 * Plus Directional Indicator
 *
 * @alias plusDI
 * @category Momentum Indicators
 */
export function PLUS_DI(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__PLUS_DI_API__, params);
}

/** @hidden */
export const plusDI = PLUS_DI;

/** @internal */
let __PLUS_DM_API__: any = API['PLUS_DM'];
/**
 * Plus Directional Movement
 *
 * @alias plusDM
 * @category Momentum Indicators
 */
export function PLUS_DM(params: {
  high: number[];
  low: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__PLUS_DM_API__, params);
}

/** @hidden */
export const plusDM = PLUS_DM;

/** @internal */
let __PPO_API__: any = API['PPO'];
/**
 * Percentage Price Oscillator
 *
 * @alias ppo
 * @category Momentum Indicators
 */
export function PPO(params: {
  inReal: number[];
  /**
   * Fast Period  
   * Number of period for the fast MA. (Integer, min: 2, max: 100000)
   * @defaultValue 12
   */
  fastPeriod?: number;
  /**
   * Slow Period  
   * Number of period for the slow MA. (Integer, min: 2, max: 100000)
   * @defaultValue 26
   */
  slowPeriod?: number;
  /**
   * MA Type  
   * Type of Moving Average. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  MAType?: MAType;
}): { output: number[] } {
  return callFunc(__PPO_API__, params);
}

/** @hidden */
export const ppo = PPO;

/** @internal */
let __ROC_API__: any = API['ROC'];
/**
 * Rate of change : ((price/prevPrice)-1)*100
 *
 * @alias roc
 * @category Momentum Indicators
 */
export function ROC(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 10
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__ROC_API__, params);
}

/** @hidden */
export const roc = ROC;

/** @internal */
let __ROCP_API__: any = API['ROCP'];
/**
 * Rate of change Percentage: (price-prevPrice)/prevPrice
 *
 * @alias rocP
 * @category Momentum Indicators
 */
export function ROCP(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 10
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__ROCP_API__, params);
}

/** @hidden */
export const rocP = ROCP;

/** @internal */
let __ROCR_API__: any = API['ROCR'];
/**
 * Rate of change ratio: (price/prevPrice)
 *
 * @alias rocR
 * @category Momentum Indicators
 */
export function ROCR(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 10
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__ROCR_API__, params);
}

/** @hidden */
export const rocR = ROCR;

/** @internal */
let __ROCR100_API__: any = API['ROCR100'];
/**
 * Rate of change ratio 100 scale: (price/prevPrice)*100
 *
 * @alias rocR100
 * @category Momentum Indicators
 */
export function ROCR100(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 10
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__ROCR100_API__, params);
}

/** @hidden */
export const rocR100 = ROCR100;

/** @internal */
let __RSI_API__: any = API['RSI'];
/**
 * Relative Strength Index
 *
 * @alias rsi
 * @category Momentum Indicators
 */
export function RSI(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__RSI_API__, params);
}

/** @hidden */
export const rsi = RSI;

/** @internal */
let __SAR_API__: any = API['SAR'];
/**
 * Parabolic SAR
 *
 * @alias sar
 * @category Overlap Studies
 */
export function SAR(params: {
  high: number[];
  low: number[];
  /**
   * Acceleration Factor  
   * Acceleration Factor used up to the Maximum value. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.02
   */
  acceleration?: number;
  /**
   * AF Maximum  
   * Acceleration Factor Maximum value. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.2
   */
  maximum?: number;
}): { output: number[] } {
  return callFunc(__SAR_API__, params);
}

/** @hidden */
export const sar = SAR;

/** @internal */
let __SAREXT_API__: any = API['SAREXT'];
/**
 * Parabolic SAR - Extended
 *
 * @alias sarExt
 * @category Overlap Studies
 */
export function SAREXT(params: {
  high: number[];
  low: number[];
  /**
   * Start Value  
   * Start value and direction. 0 for Auto, >0 for Long, <0 for Short. (Double, min: -3e+37, max: 3e+37)
   * @defaultValue 0
   */
  startValue?: number;
  /**
   * Offset on Reverse  
   * Percent offset added/removed to initial stop on short/long reversal. (Double, min: 0, max: 3e+37)
   * @defaultValue 0
   */
  offsetOnReverse?: number;
  /**
   * AF Init Long  
   * Acceleration Factor initial value for the Long direction. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.02
   */
  accelerationInitLong?: number;
  /**
   * AF Long  
   * Acceleration Factor for the Long direction. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.02
   */
  accelerationLong?: number;
  /**
   * AF Max Long  
   * Acceleration Factor maximum value for the Long direction. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.2
   */
  accelerationMaxLong?: number;
  /**
   * AF Init Short  
   * Acceleration Factor initial value for the Short direction. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.02
   */
  accelerationInitShort?: number;
  /**
   * AF Short  
   * Acceleration Factor for the Short direction. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.02
   */
  accelerationShort?: number;
  /**
   * AF Max Short  
   * Acceleration Factor maximum value for the Short direction. (Double, min: 0, max: 3e+37)
   * @defaultValue 0.2
   */
  accelerationMaxShort?: number;
}): { output: number[] } {
  return callFunc(__SAREXT_API__, params);
}

/** @hidden */
export const sarExt = SAREXT;

/** @internal */
let __SIN_API__: any = API['SIN'];
/**
 * Vector Trigonometric Sin
 *
 * @alias sin
 * @category Math Transform
 */
export function SIN(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__SIN_API__, params);
}

/** @hidden */
export const sin = SIN;

/** @internal */
let __SINH_API__: any = API['SINH'];
/**
 * Vector Trigonometric Sinh
 *
 * @alias sinh
 * @category Math Transform
 */
export function SINH(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__SINH_API__, params);
}

/** @hidden */
export const sinh = SINH;

/** @internal */
let __SMA_API__: any = API['SMA'];
/**
 * Simple Moving Average
 *
 * @alias sma
 * @category Overlap Studies
 */
export function SMA(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__SMA_API__, params);
}

/** @hidden */
export const sma = SMA;

/** @internal */
let __SQRT_API__: any = API['SQRT'];
/**
 * Vector Square Root
 *
 * @alias sqrt
 * @category Math Transform
 */
export function SQRT(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__SQRT_API__, params);
}

/** @hidden */
export const sqrt = SQRT;

/** @internal */
let __STDDEV_API__: any = API['STDDEV'];
/**
 * Standard Deviation
 *
 * @alias stdDev
 * @category Statistic Functions
 */
export function STDDEV(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 5
   */
  timePeriod?: number;
  /**
   * Deviations  
   * Nb of deviations. (Double, min: -3e+37, max: 3e+37)
   * @defaultValue 1
   */
  nbDev?: number;
}): { output: number[] } {
  return callFunc(__STDDEV_API__, params);
}

/** @hidden */
export const stdDev = STDDEV;

/** @internal */
let __STOCH_API__: any = API['STOCH'];
/**
 * Stochastic
 *
 * @alias stoch
 * @category Momentum Indicators
 */
export function STOCH(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Fast-K Period  
   * Time period for building the Fast-K line. (Integer, min: 1, max: 100000)
   * @defaultValue 5
   */
  fastK_Period?: number;
  /**
   * Slow-K Period  
   * Smoothing for making the Slow-K line. Usually set to 3. (Integer, min: 1, max: 100000)
   * @defaultValue 3
   */
  slowK_Period?: number;
  /**
   * Slow-K MA  
   * Type of Moving Average for Slow-K. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  slowK_MAType?: MAType;
  /**
   * Slow-D Period  
   * Smoothing for making the Slow-D line. (Integer, min: 1, max: 100000)
   * @defaultValue 3
   */
  slowD_Period?: number;
  /**
   * Slow-D MA  
   * Type of Moving Average for Slow-D. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  slowD_MAType?: MAType;
}): { slowK: number[]; slowD: number[] } {
  return callFunc(__STOCH_API__, params);
}

/** @hidden */
export const stoch = STOCH;

/** @internal */
let __STOCHF_API__: any = API['STOCHF'];
/**
 * Stochastic Fast
 *
 * @alias stochF
 * @category Momentum Indicators
 */
export function STOCHF(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Fast-K Period  
   * Time period for building the Fast-K line. (Integer, min: 1, max: 100000)
   * @defaultValue 5
   */
  fastK_Period?: number;
  /**
   * Fast-D Period  
   * Smoothing for making the Fast-D line. Usually set to 3. (Integer, min: 1, max: 100000)
   * @defaultValue 3
   */
  fastD_Period?: number;
  /**
   * Fast-D MA  
   * Type of Moving Average for Fast-D. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  fastD_MAType?: MAType;
}): { fastK: number[]; fastD: number[] } {
  return callFunc(__STOCHF_API__, params);
}

/** @hidden */
export const stochF = STOCHF;

/** @internal */
let __STOCHRSI_API__: any = API['STOCHRSI'];
/**
 * Stochastic Relative Strength Index
 *
 * @alias stochRsi
 * @category Momentum Indicators
 */
export function STOCHRSI(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
  /**
   * Fast-K Period  
   * Time period for building the Fast-K line. (Integer, min: 1, max: 100000)
   * @defaultValue 5
   */
  fastK_Period?: number;
  /**
   * Fast-D Period  
   * Smoothing for making the Fast-D line. Usually set to 3. (Integer, min: 1, max: 100000)
   * @defaultValue 3
   */
  fastD_Period?: number;
  /**
   * Fast-D MA  
   * Type of Moving Average for Fast-D. (MAType)
   * @defaultValue `MAType.SMA`=0
   */
  fastD_MAType?: MAType;
}): { fastK: number[]; fastD: number[] } {
  return callFunc(__STOCHRSI_API__, params);
}

/** @hidden */
export const stochRsi = STOCHRSI;

/** @internal */
let __SUB_API__: any = API['SUB'];
/**
 * Vector Arithmetic Substraction
 *
 * @alias sub
 * @category Math Operators
 */
export function SUB(params: {
  inReal0: number[];
  inReal1: number[];
}): { output: number[] } {
  return callFunc(__SUB_API__, params);
}

/** @hidden */
export const sub = SUB;

/** @internal */
let __SUM_API__: any = API['SUM'];
/**
 * Summation
 *
 * @alias sum
 * @category Math Operators
 */
export function SUM(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__SUM_API__, params);
}

/** @hidden */
export const sum = SUM;

/** @internal */
let __T3_API__: any = API['T3'];
/**
 * Triple Exponential Moving Average (T3)
 *
 * @alias t3
 * @category Overlap Studies
 */
export function T3(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 5
   */
  timePeriod?: number;
  /**
   * Volume Factor  
   * Volume Factor. (Double, min: 0, max: 1)
   * @defaultValue 0.7
   */
  VFactor?: number;
}): { output: number[] } {
  return callFunc(__T3_API__, params);
}

/** @hidden */
export const t3 = T3;

/** @internal */
let __TAN_API__: any = API['TAN'];
/**
 * Vector Trigonometric Tan
 *
 * @alias tan
 * @category Math Transform
 */
export function TAN(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__TAN_API__, params);
}

/** @hidden */
export const tan = TAN;

/** @internal */
let __TANH_API__: any = API['TANH'];
/**
 * Vector Trigonometric Tanh
 *
 * @alias tanh
 * @category Math Transform
 */
export function TANH(params: {
  inReal: number[];
}): { output: number[] } {
  return callFunc(__TANH_API__, params);
}

/** @hidden */
export const tanh = TANH;

/** @internal */
let __TEMA_API__: any = API['TEMA'];
/**
 * Triple Exponential Moving Average
 *
 * @alias tema
 * @category Overlap Studies
 */
export function TEMA(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__TEMA_API__, params);
}

/** @hidden */
export const tema = TEMA;

/** @internal */
let __TRANGE_API__: any = API['TRANGE'];
/**
 * True Range
 *
 * @alias trueRange
 * @category Volatility Indicators
 */
export function TRANGE(params: {
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__TRANGE_API__, params);
}

/** @hidden */
export const trueRange = TRANGE;

/** @internal */
let __TRIMA_API__: any = API['TRIMA'];
/**
 * Triangular Moving Average
 *
 * @alias trima
 * @category Overlap Studies
 */
export function TRIMA(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__TRIMA_API__, params);
}

/** @hidden */
export const trima = TRIMA;

/** @internal */
let __TRIX_API__: any = API['TRIX'];
/**
 * 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA
 *
 * @alias trix
 * @category Momentum Indicators
 */
export function TRIX(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__TRIX_API__, params);
}

/** @hidden */
export const trix = TRIX;

/** @internal */
let __TSF_API__: any = API['TSF'];
/**
 * Time Series Forecast
 *
 * @alias tsf
 * @category Statistic Functions
 */
export function TSF(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__TSF_API__, params);
}

/** @hidden */
export const tsf = TSF;

/** @internal */
let __TYPPRICE_API__: any = API['TYPPRICE'];
/**
 * Typical Price
 *
 * @alias typPrice
 * @category Price Transform
 */
export function TYPPRICE(params: {
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__TYPPRICE_API__, params);
}

/** @hidden */
export const typPrice = TYPPRICE;

/** @internal */
let __ULTOSC_API__: any = API['ULTOSC'];
/**
 * Ultimate Oscillator
 *
 * @alias ultOsc
 * @category Momentum Indicators
 */
export function ULTOSC(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * First Period  
   * Number of bars for 1st period.. (Integer, min: 1, max: 100000)
   * @defaultValue 7
   */
  timePeriod1?: number;
  /**
   * Second Period  
   * Number of bars fro 2nd period. (Integer, min: 1, max: 100000)
   * @defaultValue 14
   */
  timePeriod2?: number;
  /**
   * Third Period  
   * Number of bars for 3rd period. (Integer, min: 1, max: 100000)
   * @defaultValue 28
   */
  timePeriod3?: number;
}): { output: number[] } {
  return callFunc(__ULTOSC_API__, params);
}

/** @hidden */
export const ultOsc = ULTOSC;

/** @internal */
let __VAR_API__: any = API['VAR'];
/**
 * Variance
 *
 * @alias variance
 * @category Statistic Functions
 */
export function VAR(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 1, max: 100000)
   * @defaultValue 5
   */
  timePeriod?: number;
  /**
   * Deviations  
   * Nb of deviations. (Double, min: -3e+37, max: 3e+37)
   * @defaultValue 1
   */
  nbDev?: number;
}): { output: number[] } {
  return callFunc(__VAR_API__, params);
}

/** @hidden */
export const variance = VAR;

/** @internal */
let __WCLPRICE_API__: any = API['WCLPRICE'];
/**
 * Weighted Close Price
 *
 * @alias wclPrice
 * @category Price Transform
 */
export function WCLPRICE(params: {
  high: number[];
  low: number[];
  close: number[];
}): { output: number[] } {
  return callFunc(__WCLPRICE_API__, params);
}

/** @hidden */
export const wclPrice = WCLPRICE;

/** @internal */
let __WILLR_API__: any = API['WILLR'];
/**
 * Williams' %R
 *
 * @alias willR
 * @category Momentum Indicators
 */
export function WILLR(params: {
  high: number[];
  low: number[];
  close: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 14
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__WILLR_API__, params);
}

/** @hidden */
export const willR = WILLR;

/** @internal */
let __WMA_API__: any = API['WMA'];
/**
 * Weighted Moving Average
 *
 * @alias wma
 * @category Overlap Studies
 */
export function WMA(params: {
  inReal: number[];
  /**
   * Time Period  
   * Number of period. (Integer, min: 2, max: 100000)
   * @defaultValue 30
   */
  timePeriod?: number;
}): { output: number[] } {
  return callFunc(__WMA_API__, params);
}

/** @hidden */
export const wma = WMA;


//TA object is a collection of all functions.
export const TA = {"ACCBANDS": ACCBANDS,"ACOS": ACOS,"AD": AD,"ADD": ADD,"ADOSC": ADOSC,"ADX": ADX,"ADXR": ADXR,"APO": APO,"AROON": AROON,"AROONOSC": AROONOSC,"ASIN": ASIN,"ATAN": ATAN,"ATR": ATR,"AVGDEV": AVGDEV,"AVGPRICE": AVGPRICE,"BBANDS": BBANDS,"BETA": BETA,"BOP": BOP,"CCI": CCI,"CDL2CROWS": CDL2CROWS,"CDL3BLACKCROWS": CDL3BLACKCROWS,"CDL3INSIDE": CDL3INSIDE,"CDL3LINESTRIKE": CDL3LINESTRIKE,"CDL3OUTSIDE": CDL3OUTSIDE,"CDL3STARSINSOUTH": CDL3STARSINSOUTH,"CDL3WHITESOLDIERS": CDL3WHITESOLDIERS,"CDLABANDONEDBABY": CDLABANDONEDBABY,"CDLADVANCEBLOCK": CDLADVANCEBLOCK,"CDLBELTHOLD": CDLBELTHOLD,"CDLBREAKAWAY": CDLBREAKAWAY,"CDLCLOSINGMARUBOZU": CDLCLOSINGMARUBOZU,"CDLCONCEALBABYSWALL": CDLCONCEALBABYSWALL,"CDLCOUNTERATTACK": CDLCOUNTERATTACK,"CDLDARKCLOUDCOVER": CDLDARKCLOUDCOVER,"CDLDOJI": CDLDOJI,"CDLDOJISTAR": CDLDOJISTAR,"CDLDRAGONFLYDOJI": CDLDRAGONFLYDOJI,"CDLENGULFING": CDLENGULFING,"CDLEVENINGDOJISTAR": CDLEVENINGDOJISTAR,"CDLEVENINGSTAR": CDLEVENINGSTAR,"CDLGAPSIDESIDEWHITE": CDLGAPSIDESIDEWHITE,"CDLGRAVESTONEDOJI": CDLGRAVESTONEDOJI,"CDLHAMMER": CDLHAMMER,"CDLHANGINGMAN": CDLHANGINGMAN,"CDLHARAMI": CDLHARAMI,"CDLHARAMICROSS": CDLHARAMICROSS,"CDLHIGHWAVE": CDLHIGHWAVE,"CDLHIKKAKE": CDLHIKKAKE,"CDLHIKKAKEMOD": CDLHIKKAKEMOD,"CDLHOMINGPIGEON": CDLHOMINGPIGEON,"CDLIDENTICAL3CROWS": CDLIDENTICAL3CROWS,"CDLINNECK": CDLINNECK,"CDLINVERTEDHAMMER": CDLINVERTEDHAMMER,"CDLKICKING": CDLKICKING,"CDLKICKINGBYLENGTH": CDLKICKINGBYLENGTH,"CDLLADDERBOTTOM": CDLLADDERBOTTOM,"CDLLONGLEGGEDDOJI": CDLLONGLEGGEDDOJI,"CDLLONGLINE": CDLLONGLINE,"CDLMARUBOZU": CDLMARUBOZU,"CDLMATCHINGLOW": CDLMATCHINGLOW,"CDLMATHOLD": CDLMATHOLD,"CDLMORNINGDOJISTAR": CDLMORNINGDOJISTAR,"CDLMORNINGSTAR": CDLMORNINGSTAR,"CDLONNECK": CDLONNECK,"CDLPIERCING": CDLPIERCING,"CDLRICKSHAWMAN": CDLRICKSHAWMAN,"CDLRISEFALL3METHODS": CDLRISEFALL3METHODS,"CDLSEPARATINGLINES": CDLSEPARATINGLINES,"CDLSHOOTINGSTAR": CDLSHOOTINGSTAR,"CDLSHORTLINE": CDLSHORTLINE,"CDLSPINNINGTOP": CDLSPINNINGTOP,"CDLSTALLEDPATTERN": CDLSTALLEDPATTERN,"CDLSTICKSANDWICH": CDLSTICKSANDWICH,"CDLTAKURI": CDLTAKURI,"CDLTASUKIGAP": CDLTASUKIGAP,"CDLTHRUSTING": CDLTHRUSTING,"CDLTRISTAR": CDLTRISTAR,"CDLUNIQUE3RIVER": CDLUNIQUE3RIVER,"CDLUPSIDEGAP2CROWS": CDLUPSIDEGAP2CROWS,"CDLXSIDEGAP3METHODS": CDLXSIDEGAP3METHODS,"CEIL": CEIL,"CMO": CMO,"CORREL": CORREL,"COS": COS,"COSH": COSH,"DEMA": DEMA,"DIV": DIV,"DX": DX,"EMA": EMA,"EXP": EXP,"FLOOR": FLOOR,"HT_DCPERIOD": HT_DCPERIOD,"HT_DCPHASE": HT_DCPHASE,"HT_PHASOR": HT_PHASOR,"HT_SINE": HT_SINE,"HT_TRENDLINE": HT_TRENDLINE,"HT_TRENDMODE": HT_TRENDMODE,"IMI": IMI,"KAMA": KAMA,"LINEARREG": LINEARREG,"LINEARREG_ANGLE": LINEARREG_ANGLE,"LINEARREG_INTERCEPT": LINEARREG_INTERCEPT,"LINEARREG_SLOPE": LINEARREG_SLOPE,"LN": LN,"LOG10": LOG10,"MA": MA,"MACD": MACD,"MACDEXT": MACDEXT,"MACDFIX": MACDFIX,"MAMA": MAMA,"MAVP": MAVP,"MAX": MAX,"MAXINDEX": MAXINDEX,"MEDPRICE": MEDPRICE,"MFI": MFI,"MIDPOINT": MIDPOINT,"MIDPRICE": MIDPRICE,"MIN": MIN,"MININDEX": MININDEX,"MINMAX": MINMAX,"MINMAXINDEX": MINMAXINDEX,"MINUS_DI": MINUS_DI,"MINUS_DM": MINUS_DM,"MOM": MOM,"MULT": MULT,"NATR": NATR,"OBV": OBV,"PLUS_DI": PLUS_DI,"PLUS_DM": PLUS_DM,"PPO": PPO,"ROC": ROC,"ROCP": ROCP,"ROCR": ROCR,"ROCR100": ROCR100,"RSI": RSI,"SAR": SAR,"SAREXT": SAREXT,"SIN": SIN,"SINH": SINH,"SMA": SMA,"SQRT": SQRT,"STDDEV": STDDEV,"STOCH": STOCH,"STOCHF": STOCHF,"STOCHRSI": STOCHRSI,"SUB": SUB,"SUM": SUM,"T3": T3,"TAN": TAN,"TANH": TANH,"TEMA": TEMA,"TRANGE": TRANGE,"TRIMA": TRIMA,"TRIX": TRIX,"TSF": TSF,"TYPPRICE": TYPPRICE,"ULTOSC": ULTOSC,"VAR": VAR,"WCLPRICE": WCLPRICE,"WILLR": WILLR,"WMA": WMA}